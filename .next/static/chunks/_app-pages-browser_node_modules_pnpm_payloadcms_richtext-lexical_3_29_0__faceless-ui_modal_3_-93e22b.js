"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_payloadcms_richtext-lexical_3_29_0__faceless-ui_modal_3_-93e22b"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+dragon@0.28.0/node_modules/@lexical/dragon/LexicalDragon.dev.mjs":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+dragon@0.28.0/node_modules/@lexical/dragon/LexicalDragon.dev.mjs ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerDragonSupport: () => (/* binding */ registerDragonSupport)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/.pnpm/lexical@0.28.0/node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction registerDragonSupport(editor) {\n  const origin = window.location.origin;\n  const handler = event => {\n    if (event.origin !== origin) {\n      return;\n    }\n    const rootElement = editor.getRootElement();\n    if (document.activeElement !== rootElement) {\n      return;\n    }\n    const data = event.data;\n    if (typeof data === 'string') {\n      let parsedData;\n      try {\n        parsedData = JSON.parse(data);\n      } catch (e) {\n        return;\n      }\n      if (parsedData && parsedData.protocol === 'nuanria_messaging' && parsedData.type === 'request') {\n        const payload = parsedData.payload;\n        if (payload && payload.functionId === 'makeChanges') {\n          const args = payload.args;\n          if (args) {\n            const [elementStart, elementLength, text, selStart, selLength, formatCommand] = args;\n            editor.update(() => {\n              const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getSelection)();\n              if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(selection)) {\n                const anchor = selection.anchor;\n                let anchorNode = anchor.getNode();\n                let setSelStart = 0;\n                let setSelEnd = 0;\n                if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode)) {\n                  // set initial selection\n                  if (elementStart >= 0 && elementLength >= 0) {\n                    setSelStart = elementStart;\n                    setSelEnd = elementStart + elementLength;\n                    // If the offset is more than the end, make it the end\n                    selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                  }\n                }\n                if (setSelStart !== setSelEnd || text !== '') {\n                  selection.insertRawText(text);\n                  anchorNode = anchor.getNode();\n                }\n                if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode)) {\n                  // set final selection\n                  setSelStart = selStart;\n                  setSelEnd = selStart + selLength;\n                  const anchorNodeTextLength = anchorNode.getTextContentSize();\n                  // If the offset is more than the end, make it the end\n                  setSelStart = setSelStart > anchorNodeTextLength ? anchorNodeTextLength : setSelStart;\n                  setSelEnd = setSelEnd > anchorNodeTextLength ? anchorNodeTextLength : setSelEnd;\n                  selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                }\n\n                // block the chrome extension from handling this event\n                event.stopImmediatePropagation();\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n  window.addEventListener('message', handler, true);\n  return () => {\n    window.removeEventListener('message', handler, true);\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGV4aWNhbCtkcmFnb25AMC4yOC4wL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9kcmFnb24vTGV4aWNhbERyYWdvbi5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXdFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHNEQUFhO0FBQzdDLGtCQUFrQiwwREFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9EQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGhhc2hpXFxEZXNrdG9wXFxmdXNpb25pcXgtcHJvamVjdHNcXGZ1c2lvbmlxeFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQGxleGljYWwrZHJhZ29uQDAuMjguMFxcbm9kZV9tb2R1bGVzXFxAbGV4aWNhbFxcZHJhZ29uXFxMZXhpY2FsRHJhZ29uLmRldi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyAkZ2V0U2VsZWN0aW9uLCAkaXNSYW5nZVNlbGVjdGlvbiwgJGlzVGV4dE5vZGUgfSBmcm9tICdsZXhpY2FsJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiByZWdpc3RlckRyYWdvblN1cHBvcnQoZWRpdG9yKSB7XG4gIGNvbnN0IG9yaWdpbiA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG4gIGNvbnN0IGhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50Lm9yaWdpbiAhPT0gb3JpZ2luKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gZWRpdG9yLmdldFJvb3RFbGVtZW50KCk7XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHJvb3RFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBldmVudC5kYXRhO1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBwYXJzZWREYXRhO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZWREYXRhICYmIHBhcnNlZERhdGEucHJvdG9jb2wgPT09ICdudWFucmlhX21lc3NhZ2luZycgJiYgcGFyc2VkRGF0YS50eXBlID09PSAncmVxdWVzdCcpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHBhcnNlZERhdGEucGF5bG9hZDtcbiAgICAgICAgaWYgKHBheWxvYWQgJiYgcGF5bG9hZC5mdW5jdGlvbklkID09PSAnbWFrZUNoYW5nZXMnKSB7XG4gICAgICAgICAgY29uc3QgYXJncyA9IHBheWxvYWQuYXJncztcbiAgICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgY29uc3QgW2VsZW1lbnRTdGFydCwgZWxlbWVudExlbmd0aCwgdGV4dCwgc2VsU3RhcnQsIHNlbExlbmd0aCwgZm9ybWF0Q29tbWFuZF0gPSBhcmdzO1xuICAgICAgICAgICAgZWRpdG9yLnVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9ICRnZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgaWYgKCRpc1JhbmdlU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBzZWxlY3Rpb24uYW5jaG9yO1xuICAgICAgICAgICAgICAgIGxldCBhbmNob3JOb2RlID0gYW5jaG9yLmdldE5vZGUoKTtcbiAgICAgICAgICAgICAgICBsZXQgc2V0U2VsU3RhcnQgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBzZXRTZWxFbmQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICgkaXNUZXh0Tm9kZShhbmNob3JOb2RlKSkge1xuICAgICAgICAgICAgICAgICAgLy8gc2V0IGluaXRpYWwgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFN0YXJ0ID49IDAgJiYgZWxlbWVudExlbmd0aCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFNlbFN0YXJ0ID0gZWxlbWVudFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWxFbmQgPSBlbGVtZW50U3RhcnQgKyBlbGVtZW50TGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgb2Zmc2V0IGlzIG1vcmUgdGhhbiB0aGUgZW5kLCBtYWtlIGl0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldFRleHROb2RlUmFuZ2UoYW5jaG9yTm9kZSwgc2V0U2VsU3RhcnQsIGFuY2hvck5vZGUsIHNldFNlbEVuZCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZXRTZWxTdGFydCAhPT0gc2V0U2VsRW5kIHx8IHRleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uaW5zZXJ0UmF3VGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3IuZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJGlzVGV4dE5vZGUoYW5jaG9yTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHNldCBmaW5hbCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgIHNldFNlbFN0YXJ0ID0gc2VsU3RhcnQ7XG4gICAgICAgICAgICAgICAgICBzZXRTZWxFbmQgPSBzZWxTdGFydCArIHNlbExlbmd0aDtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvck5vZGVUZXh0TGVuZ3RoID0gYW5jaG9yTm9kZS5nZXRUZXh0Q29udGVudFNpemUoKTtcbiAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvZmZzZXQgaXMgbW9yZSB0aGFuIHRoZSBlbmQsIG1ha2UgaXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgc2V0U2VsU3RhcnQgPSBzZXRTZWxTdGFydCA+IGFuY2hvck5vZGVUZXh0TGVuZ3RoID8gYW5jaG9yTm9kZVRleHRMZW5ndGggOiBzZXRTZWxTdGFydDtcbiAgICAgICAgICAgICAgICAgIHNldFNlbEVuZCA9IHNldFNlbEVuZCA+IGFuY2hvck5vZGVUZXh0TGVuZ3RoID8gYW5jaG9yTm9kZVRleHRMZW5ndGggOiBzZXRTZWxFbmQ7XG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uc2V0VGV4dE5vZGVSYW5nZShhbmNob3JOb2RlLCBzZXRTZWxTdGFydCwgYW5jaG9yTm9kZSwgc2V0U2VsRW5kKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBibG9jayB0aGUgY2hyb21lIGV4dGVuc2lvbiBmcm9tIGhhbmRsaW5nIHRoaXMgZXZlbnRcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZXIsIHRydWUpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlciwgdHJ1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCB7IHJlZ2lzdGVyRHJhZ29uU3VwcG9ydCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+dragon@0.28.0/node_modules/@lexical/dragon/LexicalDragon.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+history@0.28.0/node_modules/@lexical/history/LexicalHistory.dev.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+history@0.28.0/node_modules/@lexical/history/LexicalHistory.dev.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyHistoryState: () => (/* binding */ createEmptyHistoryState),\n/* harmony export */   registerHistory: () => (/* binding */ registerHistory)\n/* harmony export */ });\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+utils@0.28.0/node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/.pnpm/lexical@0.28.0/node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n    if (dirtyElement !== undefined && !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRootNode)(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n  return nodes;\n}\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(nextSelection) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  }\n\n  // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n    return OTHER;\n  }\n  const nextDirtyNode = dirtyNodes[0];\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevDirtyNode) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n  if (prevText === nextText) {\n    return OTHER;\n  }\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n  return OTHER;\n}\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n  const nextNode = nextEditorState._nodeMap.get(key);\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  const isDeletingLine = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(nextSelection) && prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  if (!isDeletingLine && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevNode) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextNode) && prevNode.__parent === nextNode.__parent) {\n    // This has the assumption that object key order won't change if the\n    // content did not change, which should normally be safe given\n    // the manner in which nodes and exportJSON are typically implemented.\n    return JSON.stringify(prevEditorState.read(() => prevNode.exportJSON())) === JSON.stringify(nextEditorState.read(() => nextNode.exportJSON()));\n  }\n  return false;\n}\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now();\n\n    // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      }\n\n      // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n      return HISTORY_PUSH;\n    })();\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, true);\n    }\n    const historyStateEntry = redoStack.pop();\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, true);\n    }\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n      }\n      if (current !== null) {\n        undoStack.push({\n          ...current\n        });\n        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    }\n\n    // Else we merge\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n  const unregister = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_1__.mergeRegister)(editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, false);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  return unregister;\n}\n\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+history@0.28.0/node_modules/@lexical/history/LexicalHistory.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposer.dev.mjs":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposer.dev.mjs ***!
  \**************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalComposer: () => (/* binding */ LexicalComposer)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/.pnpm/lexical@0.28.0/node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE_OPTIONS = {\n  tag: 'history-merge'\n};\nfunction LexicalComposer({\n  initialConfig,\n  children\n}) {\n  const composerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const {\n      theme,\n      namespace,\n      nodes,\n      onError,\n      editorState: initialEditorState,\n      html\n    } = initialConfig;\n    const context = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.createLexicalComposerContext)(null, theme);\n    const editor = (0,lexical__WEBPACK_IMPORTED_MODULE_3__.createEditor)({\n      editable: initialConfig.editable,\n      html,\n      namespace,\n      nodes,\n      onError: error => onError(error, editor),\n      theme\n    });\n    initializeEditor(editor, initialEditorState);\n    return [editor, context];\n  },\n  // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useLayoutEffectImpl(() => {\n    const isEditable = initialConfig.editable;\n    const [editor] = composerContext;\n    editor.setEditable(isEditable !== undefined ? isEditable : true);\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.LexicalComposerContext.Provider, {\n    value: composerContext,\n    children: children\n  });\n}\nfunction initializeEditor(editor, initialEditorState) {\n  if (initialEditorState === null) {\n    return;\n  } else if (initialEditorState === undefined) {\n    editor.update(() => {\n      const root = (0,lexical__WEBPACK_IMPORTED_MODULE_3__.$getRoot)();\n      if (root.isEmpty()) {\n        const paragraph = (0,lexical__WEBPACK_IMPORTED_MODULE_3__.$createParagraphNode)();\n        root.append(paragraph);\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_3__.$getSelection)() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\n          paragraph.select();\n        }\n      }\n    }, HISTORY_MERGE_OPTIONS);\n  } else if (initialEditorState !== null) {\n    switch (typeof initialEditorState) {\n      case 'string':\n        {\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'object':\n        {\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'function':\n        {\n          editor.update(() => {\n            const root = (0,lexical__WEBPACK_IMPORTED_MODULE_3__.$getRoot)();\n            if (root.isEmpty()) {\n              initialEditorState(editor);\n            }\n          }, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n    }\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNC9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyLmRldi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkc7QUFDdkI7QUFDMUI7QUFDcEI7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsa0RBQWUsR0FBRyw0Q0FBUzs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDBCQUEwQiw4Q0FBTztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixvQkFBb0IsbUdBQTRCO0FBQ2hELG1CQUFtQixxREFBWTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILHNCQUFzQixzREFBRyxDQUFDLHlGQUFzQjtBQUNoRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsbUJBQW1CLGlEQUFRO0FBQzNCO0FBQ0EsMEJBQTBCLDZEQUFvQjtBQUM5QztBQUNBO0FBQ0EsWUFBWSxzREFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpREFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaGFzaGlcXERlc2t0b3BcXGZ1c2lvbmlxeC1wcm9qZWN0c1xcZnVzaW9uaXF4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNFxcbm9kZV9tb2R1bGVzXFxAbGV4aWNhbFxccmVhY3RcXExleGljYWxDb21wb3Nlci5kZXYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlTGV4aWNhbENvbXBvc2VyQ29udGV4dCwgTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlRWRpdG9yLCAkZ2V0Um9vdCwgJGNyZWF0ZVBhcmFncmFwaE5vZGUsICRnZXRTZWxlY3Rpb24gfSBmcm9tICdsZXhpY2FsJztcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCwgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAncmVhY3QvanN4LXJ1bnRpbWUnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmNvbnN0IENBTl9VU0VfRE9NID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5cbi8vIFRoaXMgd29ya2Fyb3VuZCBpcyBubyBsb25nZXIgbmVjZXNzYXJ5IGluIFJlYWN0IDE5LFxuLy8gYnV0IHdlIGN1cnJlbnRseSBzdXBwb3J0IFJlYWN0ID49MTcueFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbmNvbnN0IHVzZUxheW91dEVmZmVjdEltcGwgPSBDQU5fVVNFX0RPTSA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBISVNUT1JZX01FUkdFX09QVElPTlMgPSB7XG4gIHRhZzogJ2hpc3RvcnktbWVyZ2UnXG59O1xuZnVuY3Rpb24gTGV4aWNhbENvbXBvc2VyKHtcbiAgaW5pdGlhbENvbmZpZyxcbiAgY2hpbGRyZW5cbn0pIHtcbiAgY29uc3QgY29tcG9zZXJDb250ZXh0ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWUsXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBub2RlcyxcbiAgICAgIG9uRXJyb3IsXG4gICAgICBlZGl0b3JTdGF0ZTogaW5pdGlhbEVkaXRvclN0YXRlLFxuICAgICAgaHRtbFxuICAgIH0gPSBpbml0aWFsQ29uZmlnO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVMZXhpY2FsQ29tcG9zZXJDb250ZXh0KG51bGwsIHRoZW1lKTtcbiAgICBjb25zdCBlZGl0b3IgPSBjcmVhdGVFZGl0b3Ioe1xuICAgICAgZWRpdGFibGU6IGluaXRpYWxDb25maWcuZWRpdGFibGUsXG4gICAgICBodG1sLFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgbm9kZXMsXG4gICAgICBvbkVycm9yOiBlcnJvciA9PiBvbkVycm9yKGVycm9yLCBlZGl0b3IpLFxuICAgICAgdGhlbWVcbiAgICB9KTtcbiAgICBpbml0aWFsaXplRWRpdG9yKGVkaXRvciwgaW5pdGlhbEVkaXRvclN0YXRlKTtcbiAgICByZXR1cm4gW2VkaXRvciwgY29udGV4dF07XG4gIH0sXG4gIC8vIFdlIG9ubHkgZG8gdGhpcyBmb3IgaW5pdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIFtdKTtcbiAgdXNlTGF5b3V0RWZmZWN0SW1wbCgoKSA9PiB7XG4gICAgY29uc3QgaXNFZGl0YWJsZSA9IGluaXRpYWxDb25maWcuZWRpdGFibGU7XG4gICAgY29uc3QgW2VkaXRvcl0gPSBjb21wb3NlckNvbnRleHQ7XG4gICAgZWRpdG9yLnNldEVkaXRhYmxlKGlzRWRpdGFibGUgIT09IHVuZGVmaW5lZCA/IGlzRWRpdGFibGUgOiB0cnVlKTtcblxuICAgIC8vIFdlIG9ubHkgZG8gdGhpcyBmb3IgaW5pdFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeChMZXhpY2FsQ29tcG9zZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbXBvc2VyQ29udGV4dCxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5mdW5jdGlvbiBpbml0aWFsaXplRWRpdG9yKGVkaXRvciwgaW5pdGlhbEVkaXRvclN0YXRlKSB7XG4gIGlmIChpbml0aWFsRWRpdG9yU3RhdGUgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoaW5pdGlhbEVkaXRvclN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgIGNvbnN0IHJvb3QgPSAkZ2V0Um9vdCgpO1xuICAgICAgaWYgKHJvb3QuaXNFbXB0eSgpKSB7XG4gICAgICAgIGNvbnN0IHBhcmFncmFwaCA9ICRjcmVhdGVQYXJhZ3JhcGhOb2RlKCk7XG4gICAgICAgIHJvb3QuYXBwZW5kKHBhcmFncmFwaCk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBDQU5fVVNFX0RPTSA/IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgOiBudWxsO1xuICAgICAgICBpZiAoJGdldFNlbGVjdGlvbigpICE9PSBudWxsIHx8IGFjdGl2ZUVsZW1lbnQgIT09IG51bGwgJiYgYWN0aXZlRWxlbWVudCA9PT0gZWRpdG9yLmdldFJvb3RFbGVtZW50KCkpIHtcbiAgICAgICAgICBwYXJhZ3JhcGguc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBISVNUT1JZX01FUkdFX09QVElPTlMpO1xuICB9IGVsc2UgaWYgKGluaXRpYWxFZGl0b3JTdGF0ZSAhPT0gbnVsbCkge1xuICAgIHN3aXRjaCAodHlwZW9mIGluaXRpYWxFZGl0b3JTdGF0ZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHBhcnNlZEVkaXRvclN0YXRlID0gZWRpdG9yLnBhcnNlRWRpdG9yU3RhdGUoaW5pdGlhbEVkaXRvclN0YXRlKTtcbiAgICAgICAgICBlZGl0b3Iuc2V0RWRpdG9yU3RhdGUocGFyc2VkRWRpdG9yU3RhdGUsIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHtcbiAgICAgICAgICBlZGl0b3Iuc2V0RWRpdG9yU3RhdGUoaW5pdGlhbEVkaXRvclN0YXRlLCBISVNUT1JZX01FUkdFX09QVElPTlMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIHtcbiAgICAgICAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3QgPSAkZ2V0Um9vdCgpO1xuICAgICAgICAgICAgaWYgKHJvb3QuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgIGluaXRpYWxFZGl0b3JTdGF0ZShlZGl0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgTGV4aWNhbENvbXBvc2VyIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposer.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalContentEditable.dev.mjs":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalContentEditable.dev.mjs ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentEditable: () => (/* binding */ ContentEditable)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _lexical_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/text */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+text@0.28.0/node_modules/@lexical/text/LexicalText.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+utils@0.28.0/node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Source: https://github.com/gregberge/react-merge-refs/blob/main/src/index.tsx\n\nfunction mergeRefs(...refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction ContentEditableElementImpl({\n  editor,\n  ariaActiveDescendant,\n  ariaAutoComplete,\n  ariaControls,\n  ariaDescribedBy,\n  ariaErrorMessage,\n  ariaExpanded,\n  ariaInvalid,\n  ariaLabel,\n  ariaLabelledBy,\n  ariaMultiline,\n  ariaOwns,\n  ariaRequired,\n  autoCapitalize,\n  className,\n  id,\n  role = 'textbox',\n  spellCheck = true,\n  style,\n  tabIndex,\n  'data-testid': testid,\n  ...rest\n}, ref) {\n  const [isEditable, setEditable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(editor.isEditable());\n  const handleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(rootElement => {\n    // defaultView is required for a root element.\n    // In multi-window setups, the defaultView may not exist at certain points.\n    if (rootElement && rootElement.ownerDocument && rootElement.ownerDocument.defaultView) {\n      editor.setRootElement(rootElement);\n    } else {\n      editor.setRootElement(null);\n    }\n  }, [editor]);\n  const mergedRefs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => mergeRefs(ref, handleRef), [handleRef, ref]);\n  useLayoutEffectImpl(() => {\n    setEditable(editor.isEditable());\n    return editor.registerEditableListener(currentIsEditable => {\n      setEditable(currentIsEditable);\n    });\n  }, [editor]);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n    \"aria-activedescendant\": isEditable ? ariaActiveDescendant : undefined,\n    \"aria-autocomplete\": isEditable ? ariaAutoComplete : 'none',\n    \"aria-controls\": isEditable ? ariaControls : undefined,\n    \"aria-describedby\": ariaDescribedBy\n    // for compat, only override aria-errormessage if ariaErrorMessage is defined\n    ,\n    ...(ariaErrorMessage != null ? {\n      'aria-errormessage': ariaErrorMessage\n    } : {}),\n    \"aria-expanded\": isEditable && role === 'combobox' ? !!ariaExpanded : undefined\n    // for compat, only override aria-invalid if ariaInvalid is defined\n    ,\n    ...(ariaInvalid != null ? {\n      'aria-invalid': ariaInvalid\n    } : {}),\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-multiline\": ariaMultiline,\n    \"aria-owns\": isEditable ? ariaOwns : undefined,\n    \"aria-readonly\": isEditable ? undefined : true,\n    \"aria-required\": ariaRequired,\n    autoCapitalize: autoCapitalize,\n    className: className,\n    contentEditable: isEditable,\n    \"data-testid\": testid,\n    id: id,\n    ref: mergedRefs,\n    role: isEditable ? role : undefined,\n    spellCheck: spellCheck,\n    style: style,\n    tabIndex: tabIndex,\n    ...rest\n  });\n}\nconst ContentEditableElement = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ContentEditableElementImpl);\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read((0,_lexical_text__WEBPACK_IMPORTED_MODULE_2__.$canShowPlaceholderCurry)(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_3__.mergeRegister)(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst ContentEditable = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ContentEditableImpl);\nfunction ContentEditableImpl(props, ref) {\n  const {\n    placeholder,\n    ...rest\n  } = props;\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)();\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ContentEditableElement, {\n      editor: editor,\n      ...rest,\n      ref: ref\n    }), placeholder != null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Placeholder, {\n      editor: editor,\n      content: placeholder\n    })]\n  });\n}\nfunction Placeholder({\n  content,\n  editor\n}) {\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const [isEditable, setEditable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(editor.isEditable());\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n    setEditable(editor.isEditable());\n    return editor.registerEditableListener(currentIsEditable => {\n      setEditable(currentIsEditable);\n    });\n  }, [editor]);\n  if (!showPlaceholder) {\n    return null;\n  }\n  let placeholder = null;\n  if (typeof content === 'function') {\n    placeholder = content(isEditable);\n  } else if (content !== null) {\n    placeholder = content;\n  }\n  if (placeholder === null) {\n    return null;\n  }\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n    \"aria-hidden\": true,\n    children: placeholder\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNC9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbnRlbnRFZGl0YWJsZS5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVrRjtBQUNhO0FBQ3ZDO0FBQ0M7QUFDVjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxrREFBZSxHQUFHLDRDQUFTOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsb0NBQW9DLCtDQUFRO0FBQzVDLG9CQUFvQixrREFBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNILHFCQUFxQiw4Q0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsc0JBQXNCLHNEQUFHO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQUk7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxJQUFJO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDRDQUE0QyxpREFBVTs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpRUFBaUUsdUVBQXdCO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCwrQ0FBUTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZEQUFhO0FBQ3hCO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxpREFBVTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixtQkFBbUIsZ0dBQXlCO0FBQzVDLHNCQUFzQix1REFBSSxDQUFDLHVEQUFRO0FBQ25DLDRCQUE0QixzREFBRztBQUMvQjtBQUNBO0FBQ0E7QUFDQSxLQUFLLHVDQUF1QyxzREFBRztBQUMvQztBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9DQUFvQywrQ0FBUTtBQUM1QyxFQUFFLHNEQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0RBQUc7QUFDekI7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFMkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaGFzaGlcXERlc2t0b3BcXGZ1c2lvbmlxeC1wcm9qZWN0c1xcZnVzaW9uaXF4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNFxcbm9kZV9tb2R1bGVzXFxAbGV4aWNhbFxccmVhY3RcXExleGljYWxDb250ZW50RWRpdGFibGUuZGV2Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCB7IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQgfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0JztcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCwgdXNlRWZmZWN0LCBmb3J3YXJkUmVmLCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3gsIGpzeHMsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QvanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHsgJGNhblNob3dQbGFjZWhvbGRlckN1cnJ5IH0gZnJvbSAnQGxleGljYWwvdGV4dCc7XG5pbXBvcnQgeyBtZXJnZVJlZ2lzdGVyIH0gZnJvbSAnQGxleGljYWwvdXRpbHMnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmNvbnN0IENBTl9VU0VfRE9NID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5cbi8vIFRoaXMgd29ya2Fyb3VuZCBpcyBubyBsb25nZXIgbmVjZXNzYXJ5IGluIFJlYWN0IDE5LFxuLy8gYnV0IHdlIGN1cnJlbnRseSBzdXBwb3J0IFJlYWN0ID49MTcueFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbmNvbnN0IHVzZUxheW91dEVmZmVjdEltcGwgPSBDQU5fVVNFX0RPTSA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuLy8gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vZ3JlZ2JlcmdlL3JlYWN0LW1lcmdlLXJlZnMvYmxvYi9tYWluL3NyYy9pbmRleC50c3hcblxuZnVuY3Rpb24gbWVyZ2VSZWZzKC4uLnJlZnMpIHtcbiAgcmV0dXJuIHZhbHVlID0+IHtcbiAgICByZWZzLmZvckVhY2gocmVmID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlZih2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gQ29udGVudEVkaXRhYmxlRWxlbWVudEltcGwoe1xuICBlZGl0b3IsXG4gIGFyaWFBY3RpdmVEZXNjZW5kYW50LFxuICBhcmlhQXV0b0NvbXBsZXRlLFxuICBhcmlhQ29udHJvbHMsXG4gIGFyaWFEZXNjcmliZWRCeSxcbiAgYXJpYUVycm9yTWVzc2FnZSxcbiAgYXJpYUV4cGFuZGVkLFxuICBhcmlhSW52YWxpZCxcbiAgYXJpYUxhYmVsLFxuICBhcmlhTGFiZWxsZWRCeSxcbiAgYXJpYU11bHRpbGluZSxcbiAgYXJpYU93bnMsXG4gIGFyaWFSZXF1aXJlZCxcbiAgYXV0b0NhcGl0YWxpemUsXG4gIGNsYXNzTmFtZSxcbiAgaWQsXG4gIHJvbGUgPSAndGV4dGJveCcsXG4gIHNwZWxsQ2hlY2sgPSB0cnVlLFxuICBzdHlsZSxcbiAgdGFiSW5kZXgsXG4gICdkYXRhLXRlc3RpZCc6IHRlc3RpZCxcbiAgLi4ucmVzdFxufSwgcmVmKSB7XG4gIGNvbnN0IFtpc0VkaXRhYmxlLCBzZXRFZGl0YWJsZV0gPSB1c2VTdGF0ZShlZGl0b3IuaXNFZGl0YWJsZSgpKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlQ2FsbGJhY2socm9vdEVsZW1lbnQgPT4ge1xuICAgIC8vIGRlZmF1bHRWaWV3IGlzIHJlcXVpcmVkIGZvciBhIHJvb3QgZWxlbWVudC5cbiAgICAvLyBJbiBtdWx0aS13aW5kb3cgc2V0dXBzLCB0aGUgZGVmYXVsdFZpZXcgbWF5IG5vdCBleGlzdCBhdCBjZXJ0YWluIHBvaW50cy5cbiAgICBpZiAocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQub3duZXJEb2N1bWVudCAmJiByb290RWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB7XG4gICAgICBlZGl0b3Iuc2V0Um9vdEVsZW1lbnQocm9vdEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlZGl0b3Iuc2V0Um9vdEVsZW1lbnQobnVsbCk7XG4gICAgfVxuICB9LCBbZWRpdG9yXSk7XG4gIGNvbnN0IG1lcmdlZFJlZnMgPSB1c2VNZW1vKCgpID0+IG1lcmdlUmVmcyhyZWYsIGhhbmRsZVJlZiksIFtoYW5kbGVSZWYsIHJlZl0pO1xuICB1c2VMYXlvdXRFZmZlY3RJbXBsKCgpID0+IHtcbiAgICBzZXRFZGl0YWJsZShlZGl0b3IuaXNFZGl0YWJsZSgpKTtcbiAgICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyRWRpdGFibGVMaXN0ZW5lcihjdXJyZW50SXNFZGl0YWJsZSA9PiB7XG4gICAgICBzZXRFZGl0YWJsZShjdXJyZW50SXNFZGl0YWJsZSk7XG4gICAgfSk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgIFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCI6IGlzRWRpdGFibGUgPyBhcmlhQWN0aXZlRGVzY2VuZGFudCA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtYXV0b2NvbXBsZXRlXCI6IGlzRWRpdGFibGUgPyBhcmlhQXV0b0NvbXBsZXRlIDogJ25vbmUnLFxuICAgIFwiYXJpYS1jb250cm9sc1wiOiBpc0VkaXRhYmxlID8gYXJpYUNvbnRyb2xzIDogdW5kZWZpbmVkLFxuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkQnlcbiAgICAvLyBmb3IgY29tcGF0LCBvbmx5IG92ZXJyaWRlIGFyaWEtZXJyb3JtZXNzYWdlIGlmIGFyaWFFcnJvck1lc3NhZ2UgaXMgZGVmaW5lZFxuICAgICxcbiAgICAuLi4oYXJpYUVycm9yTWVzc2FnZSAhPSBudWxsID8ge1xuICAgICAgJ2FyaWEtZXJyb3JtZXNzYWdlJzogYXJpYUVycm9yTWVzc2FnZVxuICAgIH0gOiB7fSksXG4gICAgXCJhcmlhLWV4cGFuZGVkXCI6IGlzRWRpdGFibGUgJiYgcm9sZSA9PT0gJ2NvbWJvYm94JyA/ICEhYXJpYUV4cGFuZGVkIDogdW5kZWZpbmVkXG4gICAgLy8gZm9yIGNvbXBhdCwgb25seSBvdmVycmlkZSBhcmlhLWludmFsaWQgaWYgYXJpYUludmFsaWQgaXMgZGVmaW5lZFxuICAgICxcbiAgICAuLi4oYXJpYUludmFsaWQgIT0gbnVsbCA/IHtcbiAgICAgICdhcmlhLWludmFsaWQnOiBhcmlhSW52YWxpZFxuICAgIH0gOiB7fSksXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRCeSxcbiAgICBcImFyaWEtbXVsdGlsaW5lXCI6IGFyaWFNdWx0aWxpbmUsXG4gICAgXCJhcmlhLW93bnNcIjogaXNFZGl0YWJsZSA/IGFyaWFPd25zIDogdW5kZWZpbmVkLFxuICAgIFwiYXJpYS1yZWFkb25seVwiOiBpc0VkaXRhYmxlID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICBcImFyaWEtcmVxdWlyZWRcIjogYXJpYVJlcXVpcmVkLFxuICAgIGF1dG9DYXBpdGFsaXplOiBhdXRvQ2FwaXRhbGl6ZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBjb250ZW50RWRpdGFibGU6IGlzRWRpdGFibGUsXG4gICAgXCJkYXRhLXRlc3RpZFwiOiB0ZXN0aWQsXG4gICAgaWQ6IGlkLFxuICAgIHJlZjogbWVyZ2VkUmVmcyxcbiAgICByb2xlOiBpc0VkaXRhYmxlID8gcm9sZSA6IHVuZGVmaW5lZCxcbiAgICBzcGVsbENoZWNrOiBzcGVsbENoZWNrLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgLi4ucmVzdFxuICB9KTtcbn1cbmNvbnN0IENvbnRlbnRFZGl0YWJsZUVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihDb250ZW50RWRpdGFibGVFbGVtZW50SW1wbCk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gY2FuU2hvd1BsYWNlaG9sZGVyRnJvbUN1cnJlbnRFZGl0b3JTdGF0ZShlZGl0b3IpIHtcbiAgY29uc3QgY3VycmVudENhblNob3dQbGFjZWhvbGRlciA9IGVkaXRvci5nZXRFZGl0b3JTdGF0ZSgpLnJlYWQoJGNhblNob3dQbGFjZWhvbGRlckN1cnJ5KGVkaXRvci5pc0NvbXBvc2luZygpKSk7XG4gIHJldHVybiBjdXJyZW50Q2FuU2hvd1BsYWNlaG9sZGVyO1xufVxuZnVuY3Rpb24gdXNlQ2FuU2hvd1BsYWNlaG9sZGVyKGVkaXRvcikge1xuICBjb25zdCBbY2FuU2hvd1BsYWNlaG9sZGVyLCBzZXRDYW5TaG93UGxhY2Vob2xkZXJdID0gdXNlU3RhdGUoKCkgPT4gY2FuU2hvd1BsYWNlaG9sZGVyRnJvbUN1cnJlbnRFZGl0b3JTdGF0ZShlZGl0b3IpKTtcbiAgdXNlTGF5b3V0RWZmZWN0SW1wbCgoKSA9PiB7XG4gICAgZnVuY3Rpb24gcmVzZXRDYW5TaG93UGxhY2Vob2xkZXIoKSB7XG4gICAgICBjb25zdCBjdXJyZW50Q2FuU2hvd1BsYWNlaG9sZGVyID0gY2FuU2hvd1BsYWNlaG9sZGVyRnJvbUN1cnJlbnRFZGl0b3JTdGF0ZShlZGl0b3IpO1xuICAgICAgc2V0Q2FuU2hvd1BsYWNlaG9sZGVyKGN1cnJlbnRDYW5TaG93UGxhY2Vob2xkZXIpO1xuICAgIH1cbiAgICByZXNldENhblNob3dQbGFjZWhvbGRlcigpO1xuICAgIHJldHVybiBtZXJnZVJlZ2lzdGVyKGVkaXRvci5yZWdpc3RlclVwZGF0ZUxpc3RlbmVyKCgpID0+IHtcbiAgICAgIHJlc2V0Q2FuU2hvd1BsYWNlaG9sZGVyKCk7XG4gICAgfSksIGVkaXRvci5yZWdpc3RlckVkaXRhYmxlTGlzdGVuZXIoKCkgPT4ge1xuICAgICAgcmVzZXRDYW5TaG93UGxhY2Vob2xkZXIoKTtcbiAgICB9KSk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgcmV0dXJuIGNhblNob3dQbGFjZWhvbGRlcjtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBDb250ZW50RWRpdGFibGUgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihDb250ZW50RWRpdGFibGVJbXBsKTtcbmZ1bmN0aW9uIENvbnRlbnRFZGl0YWJsZUltcGwocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgcGxhY2Vob2xkZXIsXG4gICAgLi4ucmVzdFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtlZGl0b3JdID0gdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpO1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeHMoRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9qc3goQ29udGVudEVkaXRhYmxlRWxlbWVudCwge1xuICAgICAgZWRpdG9yOiBlZGl0b3IsXG4gICAgICAuLi5yZXN0LFxuICAgICAgcmVmOiByZWZcbiAgICB9KSwgcGxhY2Vob2xkZXIgIT0gbnVsbCAmJiAvKiNfX1BVUkVfXyovanN4KFBsYWNlaG9sZGVyLCB7XG4gICAgICBlZGl0b3I6IGVkaXRvcixcbiAgICAgIGNvbnRlbnQ6IHBsYWNlaG9sZGVyXG4gICAgfSldXG4gIH0pO1xufVxuZnVuY3Rpb24gUGxhY2Vob2xkZXIoe1xuICBjb250ZW50LFxuICBlZGl0b3Jcbn0pIHtcbiAgY29uc3Qgc2hvd1BsYWNlaG9sZGVyID0gdXNlQ2FuU2hvd1BsYWNlaG9sZGVyKGVkaXRvcik7XG4gIGNvbnN0IFtpc0VkaXRhYmxlLCBzZXRFZGl0YWJsZV0gPSB1c2VTdGF0ZShlZGl0b3IuaXNFZGl0YWJsZSgpKTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBzZXRFZGl0YWJsZShlZGl0b3IuaXNFZGl0YWJsZSgpKTtcbiAgICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyRWRpdGFibGVMaXN0ZW5lcihjdXJyZW50SXNFZGl0YWJsZSA9PiB7XG4gICAgICBzZXRFZGl0YWJsZShjdXJyZW50SXNFZGl0YWJsZSk7XG4gICAgfSk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgaWYgKCFzaG93UGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsZXQgcGxhY2Vob2xkZXIgPSBudWxsO1xuICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwbGFjZWhvbGRlciA9IGNvbnRlbnQoaXNFZGl0YWJsZSk7XG4gIH0gZWxzZSBpZiAoY29udGVudCAhPT0gbnVsbCkge1xuICAgIHBsYWNlaG9sZGVyID0gY29udGVudDtcbiAgfVxuICBpZiAocGxhY2Vob2xkZXIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNoaWxkcmVuOiBwbGFjZWhvbGRlclxuICB9KTtcbn1cblxuZXhwb3J0IHsgQ29udGVudEVkaXRhYmxlIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalContentEditable.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalErrorBoundary: () => (/* binding */ LexicalErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n\nvar changedArray = function changedArray(a, b) {\n  if (a === void 0) {\n    a = [];\n  }\n\n  if (b === void 0) {\n    b = [];\n  }\n\n  return a.length !== b.length || a.some(function (item, index) {\n    return !Object.is(item, b[index]);\n  });\n};\n\nvar initialState = {\n  error: null\n};\n\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.state = initialState;\n\n    _this.resetErrorBoundary = function () {\n      var _this$props;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);\n\n      _this.reset();\n    };\n\n    return _this;\n  }\n\n  ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  };\n\n  var _proto = ErrorBoundary.prototype;\n\n  _proto.reset = function reset() {\n    this.setState(initialState);\n  };\n\n  _proto.componentDidCatch = function componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n\n    (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var error = this.state.error;\n    var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error\n    // happens to *also* be in the resetKeys array, we'd end up resetting\n    // the error boundary immediately. This would likely trigger a second\n    // error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call\n    // of cDU after the error is set\n\n    if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onResetKe, _this$props3;\n\n      (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);\n      this.reset();\n    }\n  };\n\n  _proto.render = function render() {\n    var error = this.state.error;\n    var _this$props4 = this.props,\n        fallbackRender = _this$props4.fallbackRender,\n        FallbackComponent = _this$props4.FallbackComponent,\n        fallback = _this$props4.fallback;\n\n    if (error !== null) {\n      var _props = {\n        error: error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n\n      if ( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(fallback)) {\n        return fallback;\n      } else if (typeof fallbackRender === 'function') {\n        return fallbackRender(_props);\n      } else if (FallbackComponent) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FallbackComponent, _props);\n      } else {\n        throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');\n      }\n    }\n\n    return this.props.children;\n  };\n\n  return ErrorBoundary;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction LexicalErrorBoundary({\n  children,\n  onError\n}) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ErrorBoundary, {\n    fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      style: {\n        border: '1px solid #f00',\n        color: '#f00',\n        padding: '8px'\n      },\n      children: \"An error was thrown.\"\n    }),\n    onError: onError,\n    children: children\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNC9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEVycm9yQm91bmRhcnkuZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0I7QUFDUzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlFQUF5RSxhQUFhO0FBQ3RGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDZFQUE2RSxlQUFlO0FBQzVGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IsaURBQW9CO0FBQzVDO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSLDRCQUE0QixnREFBbUI7QUFDL0MsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyxDQUFDLDRDQUFlOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsc0JBQXNCLHNEQUFHO0FBQ3pCLDJCQUEyQixzREFBRztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVnQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxoYXNoaVxcRGVza3RvcFxcZnVzaW9uaXF4LXByb2plY3RzXFxmdXNpb25pcXhcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEBsZXhpY2FsK3JlYWN0QDAuMjguMF9yZWFjdC1kb21AMTkuMC4wX3JlYWN0QDE5LjAuMF9fcmVhY3RAMTkuMC4wX3lqc0AxMy42LjI0XFxub2RlX21vZHVsZXNcXEBsZXhpY2FsXFxyZWFjdFxcTGV4aWNhbEVycm9yQm91bmRhcnkuZGV2Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzeCB9IGZyb20gJ3JlYWN0L2pzeC1ydW50aW1lJztcblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbnZhciBjaGFuZ2VkQXJyYXkgPSBmdW5jdGlvbiBjaGFuZ2VkQXJyYXkoYSwgYikge1xuICBpZiAoYSA9PT0gdm9pZCAwKSB7XG4gICAgYSA9IFtdO1xuICB9XG5cbiAgaWYgKGIgPT09IHZvaWQgMCkge1xuICAgIGIgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhLmxlbmd0aCAhPT0gYi5sZW5ndGggfHwgYS5zb21lKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIHJldHVybiAhT2JqZWN0LmlzKGl0ZW0sIGJbaW5kZXhdKTtcbiAgfSk7XG59O1xuXG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICBlcnJvcjogbnVsbFxufTtcblxudmFyIEVycm9yQm91bmRhcnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRXJyb3JCb3VuZGFyeSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXJyb3JCb3VuZGFyeSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgX2FyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KF9hcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcblxuICAgIF90aGlzLnJlc2V0RXJyb3JCb3VuZGFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvcHMub25SZXNldCA9PSBudWxsID8gdm9pZCAwIDogKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpLm9uUmVzZXQuYXBwbHkoX3RoaXMkcHJvcHMsIGFyZ3MpO1xuXG4gICAgICBfdGhpcy5yZXNldCgpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBFcnJvckJvdW5kYXJ5LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBFcnJvckJvdW5kYXJ5LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZENhdGNoID0gZnVuY3Rpb24gY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGluZm8pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMkb25FcnJvciwgX3RoaXMkcHJvcHMyO1xuXG4gICAgKF90aGlzJHByb3BzJG9uRXJyb3IgPSAoX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcykub25FcnJvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHByb3BzJG9uRXJyb3IuY2FsbChfdGhpcyRwcm9wczIsIGVycm9yLCBpbmZvKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICB2YXIgcmVzZXRLZXlzID0gdGhpcy5wcm9wcy5yZXNldEtleXM7IC8vIFRoZXJlJ3MgYW4gZWRnZSBjYXNlIHdoZXJlIGlmIHRoZSB0aGluZyB0aGF0IHRyaWdnZXJlZCB0aGUgZXJyb3JcbiAgICAvLyBoYXBwZW5zIHRvICphbHNvKiBiZSBpbiB0aGUgcmVzZXRLZXlzIGFycmF5LCB3ZSdkIGVuZCB1cCByZXNldHRpbmdcbiAgICAvLyB0aGUgZXJyb3IgYm91bmRhcnkgaW1tZWRpYXRlbHkuIFRoaXMgd291bGQgbGlrZWx5IHRyaWdnZXIgYSBzZWNvbmRcbiAgICAvLyBlcnJvciB0byBiZSB0aHJvd24uXG4gICAgLy8gU28gd2UgbWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgY2hlY2sgdGhlIHJlc2V0S2V5cyBvbiB0aGUgZmlyc3QgY2FsbFxuICAgIC8vIG9mIGNEVSBhZnRlciB0aGUgZXJyb3IgaXMgc2V0XG5cbiAgICBpZiAoZXJyb3IgIT09IG51bGwgJiYgcHJldlN0YXRlLmVycm9yICE9PSBudWxsICYmIGNoYW5nZWRBcnJheShwcmV2UHJvcHMucmVzZXRLZXlzLCByZXNldEtleXMpKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkb25SZXNldEtlLCBfdGhpcyRwcm9wczM7XG5cbiAgICAgIChfdGhpcyRwcm9wcyRvblJlc2V0S2UgPSAoX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcykub25SZXNldEtleXNDaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRwcm9wcyRvblJlc2V0S2UuY2FsbChfdGhpcyRwcm9wczMsIHByZXZQcm9wcy5yZXNldEtleXMsIHJlc2V0S2V5cyk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZmFsbGJhY2tSZW5kZXIgPSBfdGhpcyRwcm9wczQuZmFsbGJhY2tSZW5kZXIsXG4gICAgICAgIEZhbGxiYWNrQ29tcG9uZW50ID0gX3RoaXMkcHJvcHM0LkZhbGxiYWNrQ29tcG9uZW50LFxuICAgICAgICBmYWxsYmFjayA9IF90aGlzJHByb3BzNC5mYWxsYmFjaztcblxuICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHtcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICByZXNldEVycm9yQm91bmRhcnk6IHRoaXMucmVzZXRFcnJvckJvdW5kYXJ5XG4gICAgICB9O1xuXG4gICAgICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChmYWxsYmFjaykpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmFsbGJhY2tSZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrUmVuZGVyKF9wcm9wcyk7XG4gICAgICB9IGVsc2UgaWYgKEZhbGxiYWNrQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGYWxsYmFja0NvbXBvbmVudCwgX3Byb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmVhY3QtZXJyb3ItYm91bmRhcnkgcmVxdWlyZXMgZWl0aGVyIGEgZmFsbGJhY2ssIGZhbGxiYWNrUmVuZGVyLCBvciBGYWxsYmFja0NvbXBvbmVudCBwcm9wJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH07XG5cbiAgcmV0dXJuIEVycm9yQm91bmRhcnk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gTGV4aWNhbEVycm9yQm91bmRhcnkoe1xuICBjaGlsZHJlbixcbiAgb25FcnJvclxufSkge1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeChFcnJvckJvdW5kYXJ5LCB7XG4gICAgZmFsbGJhY2s6IC8qI19fUFVSRV9fKi9qc3goXCJkaXZcIiwge1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNmMDAnLFxuICAgICAgICBjb2xvcjogJyNmMDAnLFxuICAgICAgICBwYWRkaW5nOiAnOHB4J1xuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuOiBcIkFuIGVycm9yIHdhcyB0aHJvd24uXCJcbiAgICB9KSxcbiAgICBvbkVycm9yOiBvbkVycm9yLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn1cblxuZXhwb3J0IHsgTGV4aWNhbEVycm9yQm91bmRhcnkgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HistoryPlugin: () => (/* binding */ HistoryPlugin),\n/* harmony export */   createEmptyHistoryState: () => (/* reexport safe */ _lexical_history__WEBPACK_IMPORTED_MODULE_0__.createEmptyHistoryState)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lexical/history */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+history@0.28.0/node_modules/@lexical/history/LexicalHistory.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useHistory(editor, externalHistoryState, delay = 1000) {\n  const historyState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => externalHistoryState || (0,_lexical_history__WEBPACK_IMPORTED_MODULE_0__.createEmptyHistoryState)(), [externalHistoryState]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return (0,_lexical_history__WEBPACK_IMPORTED_MODULE_0__.registerHistory)(editor, historyState, delay);\n  }, [delay, editor, historyState]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction HistoryPlugin({\n  delay,\n  externalHistoryState\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.useLexicalComposerContext)();\n  useHistory(editor, externalHistoryState, delay);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNC9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhpc3RvcnlQbHVnaW4uZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVrRjtBQUNOO0FBQ2pCO0FBQ2hCOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1Qiw4Q0FBTywrQkFBK0IseUVBQXVCO0FBQ3BGLEVBQUUsZ0RBQVM7QUFDWCxXQUFXLGlFQUFlO0FBQzFCLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CLGdHQUF5QjtBQUM1QztBQUNBO0FBQ0E7O0FBRXlCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGhhc2hpXFxEZXNrdG9wXFxmdXNpb25pcXgtcHJvamVjdHNcXGZ1c2lvbmlxeFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQGxleGljYWwrcmVhY3RAMC4yOC4wX3JlYWN0LWRvbUAxOS4wLjBfcmVhY3RAMTkuMC4wX19yZWFjdEAxOS4wLjBfeWpzQDEzLjYuMjRcXG5vZGVfbW9kdWxlc1xcQGxleGljYWxcXHJlYWN0XFxMZXhpY2FsSGlzdG9yeVBsdWdpbi5kZXYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlRW1wdHlIaXN0b3J5U3RhdGUsIHJlZ2lzdGVySGlzdG9yeSB9IGZyb20gJ0BsZXhpY2FsL2hpc3RvcnknO1xuZXhwb3J0IHsgY3JlYXRlRW1wdHlIaXN0b3J5U3RhdGUgfSBmcm9tICdAbGV4aWNhbC9oaXN0b3J5JztcbmltcG9ydCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiB1c2VIaXN0b3J5KGVkaXRvciwgZXh0ZXJuYWxIaXN0b3J5U3RhdGUsIGRlbGF5ID0gMTAwMCkge1xuICBjb25zdCBoaXN0b3J5U3RhdGUgPSB1c2VNZW1vKCgpID0+IGV4dGVybmFsSGlzdG9yeVN0YXRlIHx8IGNyZWF0ZUVtcHR5SGlzdG9yeVN0YXRlKCksIFtleHRlcm5hbEhpc3RvcnlTdGF0ZV0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiByZWdpc3Rlckhpc3RvcnkoZWRpdG9yLCBoaXN0b3J5U3RhdGUsIGRlbGF5KTtcbiAgfSwgW2RlbGF5LCBlZGl0b3IsIGhpc3RvcnlTdGF0ZV0pO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIEhpc3RvcnlQbHVnaW4oe1xuICBkZWxheSxcbiAgZXh0ZXJuYWxIaXN0b3J5U3RhdGVcbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIHVzZUhpc3RvcnkoZWRpdG9yLCBleHRlcm5hbEhpc3RvcnlTdGF0ZSwgZGVsYXkpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHsgSGlzdG9yeVBsdWdpbiB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnChangePlugin: () => (/* binding */ OnChangePlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction OnChangePlugin({\n  ignoreHistoryMergeTagChange = true,\n  ignoreSelectionChange = false,\n  onChange\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__.useLexicalComposerContext)();\n  useLayoutEffectImpl(() => {\n    if (onChange) {\n      return editor.registerUpdateListener(({\n        editorState,\n        dirtyElements,\n        dirtyLeaves,\n        prevEditorState,\n        tags\n      }) => {\n        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has('history-merge') || prevEditorState.isEmpty()) {\n          return;\n        }\n        onChange(editorState, editor, tags);\n      });\n    }\n  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNC9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbE9uQ2hhbmdlUGx1Z2luLmRldi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtGO0FBQy9COztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGtEQUFlLEdBQUcsNENBQVM7O0FBRXJFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQixnR0FBeUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUUwQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxoYXNoaVxcRGVza3RvcFxcZnVzaW9uaXF4LXByb2plY3RzXFxmdXNpb25pcXhcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEBsZXhpY2FsK3JlYWN0QDAuMjguMF9yZWFjdC1kb21AMTkuMC4wX3JlYWN0QDE5LjAuMF9fcmVhY3RAMTkuMC4wX3lqc0AxMy42LjI0XFxub2RlX21vZHVsZXNcXEBsZXhpY2FsXFxyZWFjdFxcTGV4aWNhbE9uQ2hhbmdlUGx1Z2luLmRldi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5jb25zdCBDQU5fVVNFX0RPTSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuXG4vLyBUaGlzIHdvcmthcm91bmQgaXMgbm8gbG9uZ2VyIG5lY2Vzc2FyeSBpbiBSZWFjdCAxOSxcbi8vIGJ1dCB3ZSBjdXJyZW50bHkgc3VwcG9ydCBSZWFjdCA+PTE3Lnhcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzI2Mzk1XG5jb25zdCB1c2VMYXlvdXRFZmZlY3RJbXBsID0gQ0FOX1VTRV9ET00gPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gT25DaGFuZ2VQbHVnaW4oe1xuICBpZ25vcmVIaXN0b3J5TWVyZ2VUYWdDaGFuZ2UgPSB0cnVlLFxuICBpZ25vcmVTZWxlY3Rpb25DaGFuZ2UgPSBmYWxzZSxcbiAgb25DaGFuZ2Vcbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIHVzZUxheW91dEVmZmVjdEltcGwoKCkgPT4ge1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgcmV0dXJuIGVkaXRvci5yZWdpc3RlclVwZGF0ZUxpc3RlbmVyKCh7XG4gICAgICAgIGVkaXRvclN0YXRlLFxuICAgICAgICBkaXJ0eUVsZW1lbnRzLFxuICAgICAgICBkaXJ0eUxlYXZlcyxcbiAgICAgICAgcHJldkVkaXRvclN0YXRlLFxuICAgICAgICB0YWdzXG4gICAgICB9KSA9PiB7XG4gICAgICAgIGlmIChpZ25vcmVTZWxlY3Rpb25DaGFuZ2UgJiYgZGlydHlFbGVtZW50cy5zaXplID09PSAwICYmIGRpcnR5TGVhdmVzLnNpemUgPT09IDAgfHwgaWdub3JlSGlzdG9yeU1lcmdlVGFnQ2hhbmdlICYmIHRhZ3MuaGFzKCdoaXN0b3J5LW1lcmdlJykgfHwgcHJldkVkaXRvclN0YXRlLmlzRW1wdHkoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvbkNoYW5nZShlZGl0b3JTdGF0ZSwgZWRpdG9yLCB0YWdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2VkaXRvciwgaWdub3JlSGlzdG9yeU1lcmdlVGFnQ2hhbmdlLCBpZ25vcmVTZWxlY3Rpb25DaGFuZ2UsIG9uQ2hhbmdlXSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBPbkNoYW5nZVBsdWdpbiB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichTextPlugin: () => (/* binding */ RichTextPlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lexical/react/useLexicalEditable */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/useLexicalEditable.dev.mjs\");\n/* harmony import */ var _lexical_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/text */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+text@0.28.0/node_modules/@lexical/text/LexicalText.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+utils@0.28.0/node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _lexical_dragon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lexical/dragon */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+dragon@0.28.0/node_modules/@lexical/dragon/LexicalDragon.dev.mjs\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+rich-text@0.28.0/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read((0,_lexical_text__WEBPACK_IMPORTED_MODULE_3__.$canShowPlaceholderCurry)(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_4__.mergeRegister)(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useDecorators(editor, ErrorBoundary) {\n  const [decorators, setDecorators] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => editor.getDecorators());\n\n  // Subscribe to changes\n  useLayoutEffectImpl(() => {\n    return editor.registerDecoratorListener(nextDecorators => {\n      (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => {\n        setDecorators(nextDecorators);\n      });\n    });\n  }, [editor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    // If the content editable mounts before the subscription is added, then\n    // nothing will be rendered on initial pass. We can get around that by\n    // ensuring that we set the value.\n    setDecorators(editor.getDecorators());\n  }, [editor]);\n\n  // Return decorators defined as React Portals\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const decoratedPortals = [];\n    const decoratorKeys = Object.keys(decorators);\n    for (let i = 0; i < decoratorKeys.length; i++) {\n      const nodeKey = decoratorKeys[i];\n      const reactDecorator = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ErrorBoundary, {\n        onError: e => editor._onError(e),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n          fallback: null,\n          children: decorators[nodeKey]\n        })\n      });\n      const element = editor.getElementByKey(nodeKey);\n      if (element !== null) {\n        decoratedPortals.push(/*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(reactDecorator, element, nodeKey));\n      }\n    }\n    return decoratedPortals;\n  }, [ErrorBoundary, decorators, editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useRichTextSetup(editor) {\n  useLayoutEffectImpl(() => {\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_4__.mergeRegister)((0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_5__.registerRichText)(editor), (0,_lexical_dragon__WEBPACK_IMPORTED_MODULE_6__.registerDragonSupport)(editor));\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction RichTextPlugin({\n  contentEditable,\n  // TODO Remove. This property is now part of ContentEditable\n  placeholder = null,\n  ErrorBoundary\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__.useLexicalComposerContext)();\n  const decorators = useDecorators(editor, ErrorBoundary);\n  useRichTextSetup(editor);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n    children: [contentEditable, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Placeholder, {\n      content: placeholder\n    }), decorators]\n  });\n}\n\n// TODO remove\nfunction Placeholder({\n  content\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__.useLexicalComposerContext)();\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const editable = (0,_lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_8__.useLexicalEditable)();\n  if (!showPlaceholder) {\n    return null;\n  }\n  if (typeof content === 'function') {\n    return content(editable);\n  } else {\n    return content;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNC9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFJpY2hUZXh0UGx1Z2luLmRldi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVrRjtBQUNYO0FBQ2Q7QUFDVjtBQUNpQztBQUM1QjtBQUNJO0FBQ0E7QUFDRjs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxrREFBZSxHQUFHLDRDQUFTOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlFQUFpRSx1RUFBd0I7QUFDekY7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELCtDQUFRO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNkRBQWE7QUFDeEI7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0MsK0NBQVE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBLE1BQU0sb0RBQVM7QUFDZjtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsZ0RBQVM7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxTQUFTLDhDQUFPO0FBQ2hCO0FBQ0E7QUFDQSxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0EsMENBQTBDLHNEQUFHO0FBQzdDO0FBQ0EsK0JBQStCLHNEQUFHLENBQUMsMkNBQVE7QUFDM0M7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLDJDQUEyQyx1REFBWTtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsNkRBQWEsQ0FBQyxvRUFBZ0IsVUFBVSxzRUFBcUI7O0FBRXhFO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQkFBbUIsZ0dBQXlCO0FBQzVDO0FBQ0E7QUFDQSxzQkFBc0IsdURBQUksQ0FBQyx1REFBUTtBQUNuQyw2Q0FBNkMsc0RBQUc7QUFDaEQ7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQkFBbUIsZ0dBQXlCO0FBQzVDO0FBQ0EsbUJBQW1CLHFGQUFrQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFMEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaGFzaGlcXERlc2t0b3BcXGZ1c2lvbmlxeC1wcm9qZWN0c1xcZnVzaW9uaXF4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAbGV4aWNhbCtyZWFjdEAwLjI4LjBfcmVhY3QtZG9tQDE5LjAuMF9yZWFjdEAxOS4wLjBfX3JlYWN0QDE5LjAuMF95anNAMTMuNi4yNFxcbm9kZV9tb2R1bGVzXFxAbGV4aWNhbFxccmVhY3RcXExleGljYWxSaWNoVGV4dFBsdWdpbi5kZXYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnO1xuaW1wb3J0IHsgdXNlTGV4aWNhbEVkaXRhYmxlIH0gZnJvbSAnQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbEVkaXRhYmxlJztcbmltcG9ydCB7ICRjYW5TaG93UGxhY2Vob2xkZXJDdXJyeSB9IGZyb20gJ0BsZXhpY2FsL3RleHQnO1xuaW1wb3J0IHsgbWVyZ2VSZWdpc3RlciB9IGZyb20gJ0BsZXhpY2FsL3V0aWxzJztcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlTWVtbywgU3VzcGVuc2UgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmbHVzaFN5bmMsIGNyZWF0ZVBvcnRhbCB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBqc3gsIGpzeHMsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QvanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHsgcmVnaXN0ZXJEcmFnb25TdXBwb3J0IH0gZnJvbSAnQGxleGljYWwvZHJhZ29uJztcbmltcG9ydCB7IHJlZ2lzdGVyUmljaFRleHQgfSBmcm9tICdAbGV4aWNhbC9yaWNoLXRleHQnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmNvbnN0IENBTl9VU0VfRE9NID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5cbi8vIFRoaXMgd29ya2Fyb3VuZCBpcyBubyBsb25nZXIgbmVjZXNzYXJ5IGluIFJlYWN0IDE5LFxuLy8gYnV0IHdlIGN1cnJlbnRseSBzdXBwb3J0IFJlYWN0ID49MTcueFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbmNvbnN0IHVzZUxheW91dEVmZmVjdEltcGwgPSBDQU5fVVNFX0RPTSA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBjYW5TaG93UGxhY2Vob2xkZXJGcm9tQ3VycmVudEVkaXRvclN0YXRlKGVkaXRvcikge1xuICBjb25zdCBjdXJyZW50Q2FuU2hvd1BsYWNlaG9sZGVyID0gZWRpdG9yLmdldEVkaXRvclN0YXRlKCkucmVhZCgkY2FuU2hvd1BsYWNlaG9sZGVyQ3VycnkoZWRpdG9yLmlzQ29tcG9zaW5nKCkpKTtcbiAgcmV0dXJuIGN1cnJlbnRDYW5TaG93UGxhY2Vob2xkZXI7XG59XG5mdW5jdGlvbiB1c2VDYW5TaG93UGxhY2Vob2xkZXIoZWRpdG9yKSB7XG4gIGNvbnN0IFtjYW5TaG93UGxhY2Vob2xkZXIsIHNldENhblNob3dQbGFjZWhvbGRlcl0gPSB1c2VTdGF0ZSgoKSA9PiBjYW5TaG93UGxhY2Vob2xkZXJGcm9tQ3VycmVudEVkaXRvclN0YXRlKGVkaXRvcikpO1xuICB1c2VMYXlvdXRFZmZlY3RJbXBsKCgpID0+IHtcbiAgICBmdW5jdGlvbiByZXNldENhblNob3dQbGFjZWhvbGRlcigpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRDYW5TaG93UGxhY2Vob2xkZXIgPSBjYW5TaG93UGxhY2Vob2xkZXJGcm9tQ3VycmVudEVkaXRvclN0YXRlKGVkaXRvcik7XG4gICAgICBzZXRDYW5TaG93UGxhY2Vob2xkZXIoY3VycmVudENhblNob3dQbGFjZWhvbGRlcik7XG4gICAgfVxuICAgIHJlc2V0Q2FuU2hvd1BsYWNlaG9sZGVyKCk7XG4gICAgcmV0dXJuIG1lcmdlUmVnaXN0ZXIoZWRpdG9yLnJlZ2lzdGVyVXBkYXRlTGlzdGVuZXIoKCkgPT4ge1xuICAgICAgcmVzZXRDYW5TaG93UGxhY2Vob2xkZXIoKTtcbiAgICB9KSwgZWRpdG9yLnJlZ2lzdGVyRWRpdGFibGVMaXN0ZW5lcigoKSA9PiB7XG4gICAgICByZXNldENhblNob3dQbGFjZWhvbGRlcigpO1xuICAgIH0pKTtcbiAgfSwgW2VkaXRvcl0pO1xuICByZXR1cm4gY2FuU2hvd1BsYWNlaG9sZGVyO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIHVzZURlY29yYXRvcnMoZWRpdG9yLCBFcnJvckJvdW5kYXJ5KSB7XG4gIGNvbnN0IFtkZWNvcmF0b3JzLCBzZXREZWNvcmF0b3JzXSA9IHVzZVN0YXRlKCgpID0+IGVkaXRvci5nZXREZWNvcmF0b3JzKCkpO1xuXG4gIC8vIFN1YnNjcmliZSB0byBjaGFuZ2VzXG4gIHVzZUxheW91dEVmZmVjdEltcGwoKCkgPT4ge1xuICAgIHJldHVybiBlZGl0b3IucmVnaXN0ZXJEZWNvcmF0b3JMaXN0ZW5lcihuZXh0RGVjb3JhdG9ycyA9PiB7XG4gICAgICBmbHVzaFN5bmMoKCkgPT4ge1xuICAgICAgICBzZXREZWNvcmF0b3JzKG5leHREZWNvcmF0b3JzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbZWRpdG9yXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSWYgdGhlIGNvbnRlbnQgZWRpdGFibGUgbW91bnRzIGJlZm9yZSB0aGUgc3Vic2NyaXB0aW9uIGlzIGFkZGVkLCB0aGVuXG4gICAgLy8gbm90aGluZyB3aWxsIGJlIHJlbmRlcmVkIG9uIGluaXRpYWwgcGFzcy4gV2UgY2FuIGdldCBhcm91bmQgdGhhdCBieVxuICAgIC8vIGVuc3VyaW5nIHRoYXQgd2Ugc2V0IHRoZSB2YWx1ZS5cbiAgICBzZXREZWNvcmF0b3JzKGVkaXRvci5nZXREZWNvcmF0b3JzKCkpO1xuICB9LCBbZWRpdG9yXSk7XG5cbiAgLy8gUmV0dXJuIGRlY29yYXRvcnMgZGVmaW5lZCBhcyBSZWFjdCBQb3J0YWxzXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBkZWNvcmF0ZWRQb3J0YWxzID0gW107XG4gICAgY29uc3QgZGVjb3JhdG9yS2V5cyA9IE9iamVjdC5rZXlzKGRlY29yYXRvcnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVjb3JhdG9yS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9kZUtleSA9IGRlY29yYXRvcktleXNbaV07XG4gICAgICBjb25zdCByZWFjdERlY29yYXRvciA9IC8qI19fUFVSRV9fKi9qc3goRXJyb3JCb3VuZGFyeSwge1xuICAgICAgICBvbkVycm9yOiBlID0+IGVkaXRvci5fb25FcnJvcihlKSxcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3goU3VzcGVuc2UsIHtcbiAgICAgICAgICBmYWxsYmFjazogbnVsbCxcbiAgICAgICAgICBjaGlsZHJlbjogZGVjb3JhdG9yc1tub2RlS2V5XVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZWRpdG9yLmdldEVsZW1lbnRCeUtleShub2RlS2V5KTtcbiAgICAgIGlmIChlbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIGRlY29yYXRlZFBvcnRhbHMucHVzaCgvKiNfX1BVUkVfXyovY3JlYXRlUG9ydGFsKHJlYWN0RGVjb3JhdG9yLCBlbGVtZW50LCBub2RlS2V5KSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWNvcmF0ZWRQb3J0YWxzO1xuICB9LCBbRXJyb3JCb3VuZGFyeSwgZGVjb3JhdG9ycywgZWRpdG9yXSk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gdXNlUmljaFRleHRTZXR1cChlZGl0b3IpIHtcbiAgdXNlTGF5b3V0RWZmZWN0SW1wbCgoKSA9PiB7XG4gICAgcmV0dXJuIG1lcmdlUmVnaXN0ZXIocmVnaXN0ZXJSaWNoVGV4dChlZGl0b3IpLCByZWdpc3RlckRyYWdvblN1cHBvcnQoZWRpdG9yKSk7XG5cbiAgICAvLyBXZSBvbmx5IGRvIHRoaXMgZm9yIGluaXRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtlZGl0b3JdKTtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBSaWNoVGV4dFBsdWdpbih7XG4gIGNvbnRlbnRFZGl0YWJsZSxcbiAgLy8gVE9ETyBSZW1vdmUuIFRoaXMgcHJvcGVydHkgaXMgbm93IHBhcnQgb2YgQ29udGVudEVkaXRhYmxlXG4gIHBsYWNlaG9sZGVyID0gbnVsbCxcbiAgRXJyb3JCb3VuZGFyeVxufSkge1xuICBjb25zdCBbZWRpdG9yXSA9IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgZGVjb3JhdG9ycyA9IHVzZURlY29yYXRvcnMoZWRpdG9yLCBFcnJvckJvdW5kYXJ5KTtcbiAgdXNlUmljaFRleHRTZXR1cChlZGl0b3IpO1xuICByZXR1cm4gLyojX19QVVJFX18qL2pzeHMoRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogW2NvbnRlbnRFZGl0YWJsZSwgLyojX19QVVJFX18qL2pzeChQbGFjZWhvbGRlciwge1xuICAgICAgY29udGVudDogcGxhY2Vob2xkZXJcbiAgICB9KSwgZGVjb3JhdG9yc11cbiAgfSk7XG59XG5cbi8vIFRPRE8gcmVtb3ZlXG5mdW5jdGlvbiBQbGFjZWhvbGRlcih7XG4gIGNvbnRlbnRcbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIGNvbnN0IHNob3dQbGFjZWhvbGRlciA9IHVzZUNhblNob3dQbGFjZWhvbGRlcihlZGl0b3IpO1xuICBjb25zdCBlZGl0YWJsZSA9IHVzZUxleGljYWxFZGl0YWJsZSgpO1xuICBpZiAoIXNob3dQbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjb250ZW50KGVkaXRhYmxlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxufVxuXG5leHBvcnQgeyBSaWNoVGV4dFBsdWdpbiB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@lexical+text@0.28.0/node_modules/@lexical/text/LexicalText.dev.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+text@0.28.0/node_modules/@lexical/text/LexicalText.dev.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $canShowPlaceholder: () => (/* binding */ $canShowPlaceholder),\n/* harmony export */   $canShowPlaceholderCurry: () => (/* binding */ $canShowPlaceholderCurry),\n/* harmony export */   $findTextIntersectionFromCharacters: () => (/* binding */ $findTextIntersectionFromCharacters),\n/* harmony export */   $isRootTextContentEmpty: () => (/* binding */ $isRootTextContentEmpty),\n/* harmony export */   $isRootTextContentEmptyCurry: () => (/* binding */ $isRootTextContentEmptyCurry),\n/* harmony export */   $rootTextContent: () => (/* binding */ $rootTextContent),\n/* harmony export */   registerLexicalTextEntity: () => (/* binding */ registerLexicalTextEntity)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/.pnpm/lexical@0.28.0/node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Returns the root's text content.\n * @returns The root's text content.\n */\nfunction $rootTextContent() {\n  const root = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n  return root.getTextContent();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Determines if the root has any text content and can trim any whitespace if it does.\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @param trim - Should the root text have its whitespaced trimmed? Defaults to true.\n * @returns true if text content is empty, false if there is text or isEditorComposing is true.\n */\nfunction $isRootTextContentEmpty(isEditorComposing, trim = true) {\n  if (isEditorComposing) {\n    return false;\n  }\n  let text = $rootTextContent();\n  if (trim) {\n    text = text.trim();\n  }\n  return text === '';\n}\n\n/**\n * Returns a function that executes {@link $isRootTextContentEmpty}\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @param trim - Should the root text have its whitespaced trimmed? Defaults to true.\n * @returns A function that executes $isRootTextContentEmpty based on arguments.\n */\nfunction $isRootTextContentEmptyCurry(isEditorComposing, trim) {\n  return () => $isRootTextContentEmpty(isEditorComposing, trim);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Determines if the input should show the placeholder. If anything is in\n * in the root the placeholder should not be shown.\n * @param isComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @returns true if the input should show the placeholder, false otherwise.\n */\nfunction $canShowPlaceholder(isComposing) {\n  if (!$isRootTextContentEmpty(isComposing, false)) {\n    return false;\n  }\n  const root = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n  const children = root.getChildren();\n  const childrenLength = children.length;\n  if (childrenLength > 1) {\n    return false;\n  }\n  for (let i = 0; i < childrenLength; i++) {\n    const topBlock = children[i];\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isDecoratorNode)(topBlock)) {\n      return false;\n    }\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(topBlock)) {\n      if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isParagraphNode)(topBlock)) {\n        return false;\n      }\n      if (topBlock.__indent !== 0) {\n        return false;\n      }\n      const topBlockChildren = topBlock.getChildren();\n      const topBlockChildrenLength = topBlockChildren.length;\n      for (let s = 0; s < topBlockChildrenLength; s++) {\n        const child = topBlockChildren[i];\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(child)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a function that executes {@link $canShowPlaceholder}\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @returns A function that executes $canShowPlaceholder with arguments.\n */\nfunction $canShowPlaceholderCurry(isEditorComposing) {\n  return () => $canShowPlaceholder(isEditorComposing);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Finds a TextNode with a size larger than targetCharacters and returns\n * the node along with the remaining length of the text.\n * @param root - The RootNode.\n * @param targetCharacters - The number of characters whose TextNode must be larger than.\n * @returns The TextNode and the intersections offset, or null if no TextNode is found.\n */\nfunction $findTextIntersectionFromCharacters(root, targetCharacters) {\n  let node = root.getFirstChild();\n  let currentCharacters = 0;\n  mainLoop: while (node !== null) {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(node)) {\n      const child = node.getFirstChild();\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n    } else if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(node)) {\n      const characters = node.getTextContentSize();\n      if (currentCharacters + characters > targetCharacters) {\n        return {\n          node,\n          offset: targetCharacters - currentCharacters\n        };\n      }\n      currentCharacters += characters;\n    }\n    const sibling = node.getNextSibling();\n    if (sibling !== null) {\n      node = sibling;\n      continue;\n    }\n    let parent = node.getParent();\n    while (parent !== null) {\n      const parentSibling = parent.getNextSibling();\n      if (parentSibling !== null) {\n        node = parentSibling;\n        continue mainLoop;\n      }\n      parent = parent.getParent();\n    }\n    break;\n  }\n  return null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls.\n\nfunction formatDevErrorMessage(message) {\n  throw new Error(message);\n}\n\n/**\n * Returns a tuple that can be rested (...) into mergeRegister to clean up\n * node transforms listeners that transforms text into another node, eg. a HashtagNode.\n * @example\n * ```ts\n *   useEffect(() => {\n    return mergeRegister(\n      ...registerLexicalTextEntity(editor, getMatch, targetNode, createNode),\n    );\n  }, [createNode, editor, getMatch, targetNode]);\n * ```\n * Where targetNode is the type of node containing the text you want to transform (like a text input),\n * then getMatch uses a regex to find a matching text and creates the proper node to include the matching text.\n * @param editor - The lexical editor.\n * @param getMatch - Finds a matching string that satisfies a regex expression.\n * @param targetNode - The node type that contains text to match with. eg. HashtagNode\n * @param createNode - A function that creates a new node to contain the matched text. eg createHashtagNode\n * @returns An array containing the plain text and reverse node transform listeners.\n */\nfunction registerLexicalTextEntity(editor, getMatch, targetNode, createNode) {\n  const isTargetNode = node => {\n    return node instanceof targetNode;\n  };\n  const $replaceWithSimpleText = node => {\n    const textNode = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createTextNode)(node.getTextContent());\n    textNode.setFormat(node.getFormat());\n    node.replace(textNode);\n  };\n  const getMode = node => {\n    return node.getLatest().__mode;\n  };\n  const $textNodeTransform = node => {\n    if (!node.isSimpleText()) {\n      return;\n    }\n    let prevSibling = node.getPreviousSibling();\n    let text = node.getTextContent();\n    let currentNode = node;\n    let match;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling)) {\n      const previousText = prevSibling.getTextContent();\n      const combinedText = previousText + text;\n      const prevMatch = getMatch(combinedText);\n      if (isTargetNode(prevSibling)) {\n        if (prevMatch === null || getMode(prevSibling) !== 0) {\n          $replaceWithSimpleText(prevSibling);\n          return;\n        } else {\n          const diff = prevMatch.end - previousText.length;\n          if (diff > 0) {\n            const concatText = text.slice(0, diff);\n            const newTextContent = previousText + concatText;\n            prevSibling.select();\n            prevSibling.setTextContent(newTextContent);\n            if (diff === text.length) {\n              node.remove();\n            } else {\n              const remainingText = text.slice(diff);\n              node.setTextContent(remainingText);\n            }\n            return;\n          }\n        }\n      } else if (prevMatch === null || prevMatch.start < previousText.length) {\n        return;\n      }\n    }\n    let prevMatchLengthToSkip = 0;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      match = getMatch(text);\n      let nextText = match === null ? '' : text.slice(match.end);\n      text = nextText;\n      if (nextText === '') {\n        const nextSibling = currentNode.getNextSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextSibling)) {\n          nextText = currentNode.getTextContent() + nextSibling.getTextContent();\n          const nextMatch = getMatch(nextText);\n          if (nextMatch === null) {\n            if (isTargetNode(nextSibling)) {\n              $replaceWithSimpleText(nextSibling);\n            } else {\n              nextSibling.markDirty();\n            }\n            return;\n          } else if (nextMatch.start !== 0) {\n            return;\n          }\n        }\n      }\n      if (match === null) {\n        return;\n      }\n      if (match.start === 0 && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling) && prevSibling.isTextEntity()) {\n        prevMatchLengthToSkip += match.end;\n        continue;\n      }\n      let nodeToReplace;\n      if (match.start === 0) {\n        [nodeToReplace, currentNode] = currentNode.splitText(match.end);\n      } else {\n        [, nodeToReplace, currentNode] = currentNode.splitText(match.start + prevMatchLengthToSkip, match.end + prevMatchLengthToSkip);\n      }\n      if (!(nodeToReplace !== undefined)) {\n        formatDevErrorMessage(`${'nodeToReplace'} should not be undefined. You may want to check splitOffsets passed to the splitText.`);\n      }\n      const replacementNode = createNode(nodeToReplace);\n      replacementNode.setFormat(nodeToReplace.getFormat());\n      nodeToReplace.replace(replacementNode);\n      if (currentNode == null) {\n        return;\n      }\n      prevMatchLengthToSkip = 0;\n      prevSibling = replacementNode;\n    }\n  };\n  const $reverseNodeTransform = node => {\n    const text = node.getTextContent();\n    const match = getMatch(text);\n    if (match === null || match.start !== 0) {\n      $replaceWithSimpleText(node);\n      return;\n    }\n    if (text.length > match.end) {\n      // This will split out the rest of the text as simple text\n      node.splitText(match.end);\n      return;\n    }\n    const prevSibling = node.getPreviousSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling) && prevSibling.isTextEntity()) {\n      $replaceWithSimpleText(prevSibling);\n      $replaceWithSimpleText(node);\n    }\n    const nextSibling = node.getNextSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextSibling) && nextSibling.isTextEntity()) {\n      $replaceWithSimpleText(nextSibling);\n\n      // This may have already been converted in the previous block\n      if (isTargetNode(node)) {\n        $replaceWithSimpleText(node);\n      }\n    }\n  };\n  const removePlainTextTransform = editor.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_0__.TextNode, $textNodeTransform);\n  const removeReverseNodeTransform = editor.registerNodeTransform(targetNode, $reverseNodeTransform);\n  return [removePlainTextTransform, removeReverseNodeTransform];\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@lexical+text@0.28.0/node_modules/@lexical/text/LexicalText.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-MAUKSOAP.js":
/*!*************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-MAUKSOAP.js ***!
  \*************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichText: () => (/* binding */ Fi)\n/* harmony export */ });\n/* harmony import */ var _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chunk-DOZWITPU.js */ \"(app-pages-browser)/./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/chunk-DOZWITPU.js\");\n/* harmony import */ var _chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chunk-BZZVLW4U.js */ \"(app-pages-browser)/./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/chunk-BZZVLW4U.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @payloadcms/ui */ \"(app-pages-browser)/./node_modules/.pnpm/@payloadcms+ui@3.29.0_@types+react@19.0.12_monaco-editor@0.52.2_next@15.2.3_react-dom@19.0.0__6foz6jijn6rbzigwzaxvvu7b5a/node_modules/@payloadcms/ui/dist/exports/client/index.js\");\n/* harmony import */ var _payloadcms_ui_shared__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @payloadcms/ui/shared */ \"(app-pages-browser)/./node_modules/.pnpm/@payloadcms+ui@3.29.0_@types+react@19.0.12_monaco-editor@0.52.2_next@15.2.3_react-dom@19.0.0__6foz6jijn6rbzigwzaxvvu7b5a/node_modules/@payloadcms/ui/dist/exports/shared/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_error_boundary__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! react-error-boundary */ \"(app-pages-browser)/./node_modules/.pnpm/react-error-boundary@4.1.2_react@19.0.0/node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\");\n/* harmony import */ var _bundled_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bundled.css */ \"(app-pages-browser)/./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css\");\n/* harmony import */ var _lexical_react_LexicalComposer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @lexical/react/LexicalComposer.js */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposer.dev.mjs\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/compiler-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/compiler-runtime.js\");\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @lexical/react/LexicalErrorBoundary.js */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalHistoryPlugin_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @lexical/react/LexicalHistoryPlugin.js */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalOnChangePlugin_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @lexical/react/LexicalOnChangePlugin.js */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalRichTextPlugin_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @lexical/react/LexicalRichTextPlugin.js */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/.pnpm/lexical@0.28.0/node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+utils@0.28.0/node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+rich-text@0.28.0/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/* harmony import */ var _payloadcms_ui__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @payloadcms/ui */ \"(app-pages-browser)/./node_modules/.pnpm/@payloadcms+ui@3.29.0_@types+react@19.0.12_monaco-editor@0.52.2_next@15.2.3_react-dom@19.0.0__6foz6jijn6rbzigwzaxvvu7b5a/node_modules/@payloadcms/ui/dist/exports/client/chunk-3AA2TJQ5.js\");\n/* harmony import */ var _lexical_react_LexicalContentEditable_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @lexical/react/LexicalContentEditable.js */ \"(app-pages-browser)/./node_modules/.pnpm/@lexical+react@0.28.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_yjs@13.6.24/node_modules/@lexical/react/LexicalContentEditable.dev.mjs\");\n/* __next_internal_client_entry_do_not_use__ RichText auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar $ = (param)=>{\n    let { anchorElem: t, clientProps: e, plugin: o } = param;\n    return o.position === \"floatingAnchorElem\" && t ? o.Component && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o.Component, {\n        anchorElem: t,\n        clientProps: e\n    }) : o.Component && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o.Component, {\n        clientProps: e\n    });\n};\n\n\n\n\n\nfunction Ae() {\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(3), [e] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), o = zt, r, n;\n    return t[0] !== e ? (r = ()=>(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.mergeRegister)(e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.CLICK_COMMAND, jt, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.KEY_DELETE_COMMAND, o, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.KEY_BACKSPACE_COMMAND, o, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.SELECTION_CHANGE_COMMAND, Ht, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.KEY_ARROW_UP_COMMAND, $t, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.KEY_ARROW_DOWN_COMMAND, Ot, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW)), n = [\n        e\n    ], t[0] = e, t[1] = r, t[2] = n) : (r = t[1], n = t[2]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(r, n), null;\n}\n_c = Ae;\nfunction Ot(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isNodeSelection)(e)) {\n        var _e_getNodes_, _ne;\n        t.preventDefault();\n        let i = (_e_getNodes_ = e.getNodes()[0]) === null || _e_getNodes_ === void 0 ? void 0 : _e_getNodes_.getNextSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(i)) {\n            let p = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(i.getKey());\n            return p && Z({\n                element: p,\n                node: i\n            }), !0;\n        }\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isElementNode)(i)) return !0;\n        var _i_getFirstDescendant;\n        let l = (_i_getFirstDescendant = i.getFirstDescendant()) !== null && _i_getFirstDescendant !== void 0 ? _i_getFirstDescendant : i;\n        return l && ((_ne = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.$findMatchingParent)(l, se)) === null || _ne === void 0 ? void 0 : _ne.selectEnd(), t.preventDefault()), !0;\n    }\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isRangeSelection)(e)) return !1;\n    let r = (e.isBackward() ? e.anchor : e.focus).getNode(), n = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.$findMatchingParent)(r, Ft), c = n === null || n === void 0 ? void 0 : n.getNextSibling();\n    if (!n || c !== Ie(n)) return !1;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(c)) {\n        let i = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(c.getKey());\n        if (i) return Z({\n            element: i,\n            node: c\n        }), t.preventDefault(), !0;\n    }\n    return !1;\n}\n_c1 = Ot;\nfunction Ft(t) {\n    return Ie(t) !== null;\n}\n_c2 = Ft;\nfunction $t(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isNodeSelection)(e)) {\n        var _e_getNodes_, _ne;\n        let i = (_e_getNodes_ = e.getNodes()[0]) === null || _e_getNodes_ === void 0 ? void 0 : _e_getNodes_.getPreviousSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(i)) {\n            let p = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(i.getKey());\n            return p ? (Z({\n                element: p,\n                node: i\n            }), t.preventDefault(), !0) : !1;\n        }\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isElementNode)(i)) return !1;\n        var _i_getLastDescendant;\n        let l = (_i_getLastDescendant = i.getLastDescendant()) !== null && _i_getLastDescendant !== void 0 ? _i_getLastDescendant : i;\n        return l ? ((_ne = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.$findMatchingParent)(l, se)) === null || _ne === void 0 ? void 0 : _ne.selectStart(), t.preventDefault(), !0) : !1;\n    }\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isRangeSelection)(e)) return !1;\n    let r = (e.isBackward() ? e.anchor : e.focus).getNode(), n = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.$findMatchingParent)(r, Kt), c = n === null || n === void 0 ? void 0 : n.getPreviousSibling();\n    if (!n || c !== _e(n)) return !1;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(c)) {\n        let i = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(c.getKey());\n        if (i) return Z({\n            element: i,\n            node: c\n        }), t.preventDefault(), !0;\n    }\n    return !1;\n}\nfunction Kt(t) {\n    return _e(t) !== null;\n}\n_c3 = Kt;\nfunction Ht() {\n    var _document_querySelector, _t_element;\n    let t = Gt();\n    return (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\"), t ? ((_t_element = t.element) === null || _t_element === void 0 ? void 0 : _t_element.classList.add(\"decorator-selected\"), !0) : !1;\n}\n_c4 = Ht;\nfunction jt(t) {\n    var _document_querySelector;\n    (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\");\n    let e = Yt(t);\n    if (!e) return !0;\n    let { target: o } = t;\n    return !(o instanceof HTMLElement) || o.isContentEditable || o.closest('button, textarea, input, .react-select, .code-editor, .no-select-decorator, [role=\"button\"]') ? (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$setSelection)(null) : Z(e), !0;\n}\nfunction zt(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isNodeSelection)(e) ? (t.preventDefault(), e.getNodes().forEach(Wt), !0) : !1;\n}\nfunction Wt(t) {\n    t.remove();\n}\n_c5 = Wt;\nfunction Yt(t) {\n    if (!(t.target instanceof HTMLElement)) return;\n    let e = t.target.closest('[data-lexical-decorator=\"true\"]');\n    if (!(e instanceof HTMLElement)) return;\n    let o = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNearestNodeFromDOMNode)(e);\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(o) ? {\n        element: e,\n        node: o\n    } : void 0;\n}\n_c6 = Yt;\nfunction Gt() {\n    let t = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isNodeSelection)(t)) return;\n    let e = t.getNodes();\n    if (e.length !== 1) return;\n    let o = e[0];\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(o) ? {\n        decorator: o,\n        element: (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(o.getKey())\n    } : void 0;\n}\n_c7 = Gt;\nfunction Z(param) {\n    let { element: t, node: e } = param;\n    var _document_querySelector;\n    (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\");\n    let o = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$createNodeSelection)();\n    o.add(e.getKey()), (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$setSelection)(o), t.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"nearest\"\n    }), t.classList.add(\"decorator-selected\");\n}\n_c8 = Z;\nfunction se(t) {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(t) && !t.isInline()) return !0;\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isElementNode)(t) || (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isRootOrShadowRoot)(t)) return !1;\n    let e = t.getFirstChild(), o = e === null || (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isLineBreakNode)(e) || (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isTextNode)(e) || e.isInline();\n    return !t.isInline() && t.canBeEmpty() !== !1 && o;\n}\nfunction Ie(t) {\n    let e = t.getNextSibling();\n    for(; e !== null;){\n        if (se(e)) return e;\n        e = e.getNextSibling();\n    }\n    return null;\n}\n_c9 = Ie;\nfunction _e(t) {\n    let e = t.getPreviousSibling();\n    for(; e !== null;){\n        if (se(e)) return e;\n        e = e.getPreviousSibling();\n    }\n    return null;\n}\n\n\n\n\n\n\nvar Y = function(t, e, o, r) {\n    let n = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 50, c = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 25;\n    let i = 0;\n    if (t && !t.contains(r)) {\n        let { bottom: l, left: u, right: p, top: h } = t.getBoundingClientRect(), a = h + window.scrollY, s = l + window.scrollY;\n        if (o < a - c || o > s + c || e < u - n || e > p + n) return -1;\n        (e < u || e > p) && (i = e < u ? e - u : e - p);\n    }\n    return i;\n};\n_c10 = Y;\n\nfunction G(t) {\n    let e = t.getBoundingClientRect(), o = getComputedStyle(t).getPropertyValue(\"transform\");\n    if (!o || o === \"none\") return e;\n    let r = o.split(\",\").pop();\n    return e.y = e.y - Number(r === null || r === void 0 ? void 0 : r.replace(\")\", \"\")), e;\n}\n_c11 = G;\nfunction le(t) {\n    let e = (u, p)=>u ? parseFloat(window.getComputedStyle(u)[p]) : 0, { marginBottom: o, marginTop: r } = window.getComputedStyle(t), n = e(t.previousElementSibling, \"marginBottom\"), c = e(t.nextElementSibling, \"marginTop\"), i = Math.max(parseFloat(r), n);\n    return {\n        marginBottom: Math.max(parseFloat(o), c),\n        marginTop: i\n    };\n}\n\nfunction H(t) {\n    return t.getEditorState().read(()=>(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getRoot)().getChildrenKeys());\n}\n_c12 = H;\nvar Ut = 1, qt = -1, Oe = 0, B = {\n    props: null,\n    result: null\n};\nfunction Jt(t, e) {\n    let o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 20;\n    let r = t.x - e.x, n = t.y - e.y;\n    return r * r + n * n <= o * o;\n}\n_c13 = Jt;\nfunction V(t) {\n    let { anchorElem: e, cache_threshold: o = 20, editor: r, fuzzy: n = !1, horizontalOffset: c = 0, point: { x: i, y: l }, startIndex: u = 0, useEdgeAsDefault: p = !1 } = t;\n    if (o > 0 && B.props && B.result && B.props.fuzzy === t.fuzzy && B.props.horizontalOffset === t.horizontalOffset && B.props.useEdgeAsDefault === t.useEdgeAsDefault && Jt(B.props.point, t.point, o)) return B.result;\n    let h = e.getBoundingClientRect(), a = H(r), s = {\n        blockElem: null,\n        blockNode: null,\n        distance: 1 / 0,\n        foundAtIndex: -1,\n        isFoundNodeEmptyParagraph: !1\n    };\n    return r.getEditorState().read(()=>{\n        if (p) {\n            let m = r.getElementByKey(a[0]), y = r.getElementByKey(a[a.length - 1]);\n            if (m && y) {\n                let [d, f] = [\n                    G(m),\n                    G(y)\n                ];\n                if (l < d.top ? (s.blockElem = m, s.distance = d.top - l, s.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(a[0]), s.foundAtIndex = 0) : l > f.bottom && (s.distance = l - f.bottom, s.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(a[a.length - 1]), s.blockElem = y, s.foundAtIndex = a.length - 1), s === null || s === void 0 ? void 0 : s.blockElem) return {\n                    blockElem: null,\n                    isFoundNodeEmptyParagraph: !1\n                };\n            }\n        }\n        let g = u, x = Oe;\n        for(; g >= 0 && g < a.length;){\n            let m = a[g], y = r.getElementByKey(m);\n            if (y === null) break;\n            let d = new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(i + c, l), f = _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.j.fromDOMRect(G(y)), { marginBottom: E, marginTop: T } = le(y), R = f.generateNewRect({\n                bottom: f.bottom + E,\n                left: h.left,\n                right: h.right,\n                top: f.top - T\n            }), { distance: S, isOnBottomSide: k, isOnTopSide: C } = R.distanceFromPoint(d);\n            if (S === 0) {\n                s.blockElem = y, s.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(m), s.foundAtIndex = g, s.distance = S, s.blockNode && s.blockNode.getType() === \"paragraph\" && s.blockNode.getTextContent() === \"\" && (!n && !t.returnEmptyParagraphs && (s.blockElem = null, s.blockNode = null), s.isFoundNodeEmptyParagraph = !0);\n                break;\n            } else n && S < s.distance && (s.blockElem = y, s.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(m), s.distance = S, s.foundAtIndex = g);\n            x === Oe && (C ? x = qt : k ? x = Ut : x = 1 / 0), g += x;\n        }\n    }), B.props = t, B.result = {\n        blockElem: s.blockElem,\n        blockNode: s.blockNode,\n        foundAtIndex: s.foundAtIndex,\n        isFoundNodeEmptyParagraph: s.isFoundNodeEmptyParagraph\n    }, {\n        blockElem: s.blockElem,\n        blockNode: s.blockNode,\n        foundAtIndex: s.foundAtIndex,\n        isFoundNodeEmptyParagraph: s.isFoundNodeEmptyParagraph\n    };\n}\n_c14 = V;\nfunction ce(t, e) {\n    return !!t.closest(\".\".concat(e));\n}\nvar Qt = [\n    \"IMG\",\n    \"INPUT\",\n    \"TEXTAREA\",\n    \"SELECT\",\n    \"BUTTON\",\n    \"VIDEO\",\n    \"OBJECT\",\n    \"EMBED\",\n    \"IFRAME\",\n    \"HR\"\n];\nfunction Fe(t) {\n    if (!t || Qt.includes(t.tagName) || t.offsetHeight === 0 || t.offsetWidth === 0) return !1;\n    let e = window.getComputedStyle(t);\n    return !(e.display === \"table-cell\" || e.position === \"absolute\" || e.visibility === \"hidden\" || e.opacity === \"0\");\n}\n_c15 = Fe;\nfunction ue(t, e, o) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    if (!t) {\n        e.style.opacity = \"0\", e.style.transform = \"translate(-10000px, -10000px)\";\n        return;\n    }\n    let n = t.getBoundingClientRect(), c = window.getComputedStyle(t), i = e.getBoundingClientRect(), l = o.getBoundingClientRect(), u;\n    if ([\n        \"lexical-block\",\n        \"lexical-upload\",\n        \"lexical-relationship\"\n    ].some((a)=>{\n        var _t_firstElementChild;\n        return (_t_firstElementChild = t.firstElementChild) === null || _t_firstElementChild === void 0 ? void 0 : _t_firstElementChild.classList.contains(a);\n    })) u = n.top + 8 - l.top;\n    else {\n        let a = Fe(t) ? parseInt(c.lineHeight, 10) : 0;\n        u = n.top + (a - i.height) / 2 - l.top;\n    }\n    let h = r;\n    e.style.opacity = \"1\", e.style.transform = \"translate(\".concat(h, \"px, \").concat(u, \"px)\");\n}\nvar io = \"add-block-menu\", de = 1 / 0;\nfunction so(t) {\n    return t === 0 ? 1 / 0 : de >= 0 && de < t ? de : Math.floor(t / 2);\n}\nfunction lo(t, e, o) {\n    var _n_admin;\n    let r = e.parentElement, { editorConfig: n } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), c = (n === null || n === void 0 ? void 0 : (_n_admin = n.admin) === null || _n_admin === void 0 ? void 0 : _n_admin.hideGutter) ? -24 : 12, i = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), [l, u] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _document;\n        function h(a) {\n            let s = a.target;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(s)) return;\n            let g = Y(r, a.pageX, a.pageY, s);\n            if (g === -1) {\n                u(null);\n                return;\n            }\n            if (ce(s, io)) return;\n            let x = H(t), { blockElem: m, blockNode: y, foundAtIndex: d } = V({\n                anchorElem: e,\n                cache_threshold: 0,\n                editor: t,\n                horizontalOffset: -g,\n                point: new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(a.x, a.y),\n                returnEmptyParagraphs: !0,\n                startIndex: so(x.length),\n                useEdgeAsDefault: !1\n            });\n            de = d, m && y && ((l === null || l === void 0 ? void 0 : l.node) !== y || (l === null || l === void 0 ? void 0 : l.elem) !== m) && u({\n                elem: m,\n                node: y\n            });\n        }\n        return (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener(\"mousemove\", h), ()=>{\n            var _document;\n            (_document = document) === null || _document === void 0 ? void 0 : _document.removeEventListener(\"mousemove\", h);\n        };\n    }, [\n        r,\n        e,\n        t,\n        l\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        i.current && (l === null || l === void 0 ? void 0 : l.node) && ue(l === null || l === void 0 ? void 0 : l.elem, i.current, e, c);\n    }, [\n        e,\n        l,\n        c\n    ]);\n    let p = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((h)=>{\n        let a = l;\n        (a === null || a === void 0 ? void 0 : a.node) && (t.update(()=>{\n            let s = !0;\n            if (((a === null || a === void 0 ? void 0 : a.node.getType()) !== \"paragraph\" || a.node.getTextContent() !== \"\") && (s = !1), !s) {\n                let g = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$createParagraphNode)();\n                a === null || a === void 0 ? void 0 : a.node.insertAfter(g), setTimeout(()=>{\n                    a = {\n                        elem: t.getElementByKey(g.getKey()),\n                        node: g\n                    }, u(a);\n                }, 0);\n            }\n        }), setTimeout(()=>{\n            t.update(()=>{\n                t.focus(), (a === null || a === void 0 ? void 0 : a.node) && \"select\" in a.node && typeof a.node.select == \"function\" && a.node.select();\n            });\n        }, 1), setTimeout(()=>{\n            t.dispatchCommand(_chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.h, {\n                node: a === null || a === void 0 ? void 0 : a.node\n            });\n        }, 2), h.stopPropagation(), h.preventDefault());\n    }, [\n        t,\n        l\n    ]);\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_7__.createPortal)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n            \"aria-label\": \"Add block\",\n            className: \"icon add-block-menu\",\n            onClick: (h)=>{\n                p(h);\n            },\n            ref: i,\n            type: \"button\",\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: o ? \"icon\" : \"\"\n            })\n        })\n    }), e);\n}\nfunction He(t) {\n    let { anchorElem: e } = t, o = e === void 0 ? document.body : e, [r] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)();\n    return lo(r, o, r._editable);\n}\n_c16 = He;\n\n\n\n\n\n\n\nvar je = 0, ao = -24;\nvar j = 0;\nfunction ze(t, e, o, r, n, c, i, l, u) {\n    let p = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : !1;\n    let { height: h, top: a } = r.getBoundingClientRect(), { top: s, width: g } = i.getBoundingClientRect(), { marginBottom: x, marginTop: m } = le(r), y = a, d = c >= a + h / 2 + window.scrollY, f = !1;\n    if (n === null || n === void 0 ? void 0 : n.elem) if (r !== (n === null || n === void 0 ? void 0 : n.elem)) (d && (n === null || n === void 0 ? void 0 : n.elem) && (n === null || n === void 0 ? void 0 : n.elem) === r.nextElementSibling || !d && (n === null || n === void 0 ? void 0 : n.elem) && (n === null || n === void 0 ? void 0 : n.elem) === r.previousElementSibling) && (j++, j < 200 && (f = !0));\n    else {\n        var _n_boundingBox;\n        j++;\n        let S = n === null || n === void 0 ? void 0 : (_n_boundingBox = n.boundingBox) === null || _n_boundingBox === void 0 ? void 0 : _n_boundingBox.y, k = r.getBoundingClientRect().y;\n        (d === (n === null || n === void 0 ? void 0 : n.isBelow) && S === k || j < 200) && (f = !1);\n    }\n    if (f) return {\n        isBelow: d,\n        willStayInSamePosition: f\n    };\n    p ? y += h / 2 : d ? y += h + x / 2 : y -= m / 2;\n    let E = 0;\n    p || (d ? E = -je : E = je);\n    let T = y - s + E, R = ao - e;\n    return o.style.width = \"calc(\".concat(g, \"px - \").concat(t, \")\"), o.style.opacity = \".8\", o.style.transform = \"translate(\".concat(R, \"px, calc(\").concat(T, \"px - 2px))\"), (n === null || n === void 0 ? void 0 : n.elem) && (n.elem.style.opacity = \"\", (n === null || n === void 0 ? void 0 : n.elem) === r ? d ? n.elem.style.marginTop = \"\" : n.elem.style.marginBottom = \"\" : (n.elem.style.marginBottom = \"\", n.elem.style.marginTop = \"\")), j = 0, {\n        isBelow: d,\n        willStayInSamePosition: f\n    };\n}\nvar po = \"draggable-block-menu\", Ve = \"application/x-lexical-drag-block\", ee = 1 / 0;\nfunction Ue(t) {\n    return t === 0 ? 1 / 0 : ee >= 0 && ee < t ? ee : Math.floor(t / 2);\n}\n_c17 = Ue;\nfunction go(t, e) {\n    let { transform: o } = e.style;\n    t.setDragImage(e, 0, 0), setTimeout(()=>{\n        e.style.transform = o;\n    });\n}\nfunction qe(t, e) {\n    t && (t.style.opacity = \"0\"), e && (e.style.opacity = \"\", e.style.marginBottom = \"\", e.style.marginTop = \"\");\n}\nfunction ho(t, e, o) {\n    var _s_admin, _s_admin1;\n    let r = e.parentElement, n = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), c = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), i = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), l = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(!1), [u, p] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), [h, a] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), { editorConfig: s } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), g = (s === null || s === void 0 ? void 0 : (_s_admin = s.admin) === null || _s_admin === void 0 ? void 0 : _s_admin.hideGutter) ? -44 : -8;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _document;\n        function y(d) {\n            let f = d.target;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(f)) return;\n            let E = Y(r, d.pageX, d.pageY, f);\n            if (E === -1) {\n                p(null);\n                return;\n            }\n            if (ce(f, po)) return;\n            let T = H(t), { blockElem: R, foundAtIndex: S, isFoundNodeEmptyParagraph: k } = V({\n                anchorElem: e,\n                cache_threshold: 0,\n                editor: t,\n                horizontalOffset: -E,\n                point: new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(d.x, d.y),\n                startIndex: Ue(T.length),\n                useEdgeAsDefault: !1,\n                verbose: !1\n            });\n            ee = S, !(!R && !k) && u !== R && p(R);\n        }\n        return (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener(\"mousemove\", y), ()=>{\n            var _document;\n            (_document = document) === null || _document === void 0 ? void 0 : _document.removeEventListener(\"mousemove\", y);\n        };\n    }, [\n        r,\n        e,\n        t,\n        u\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        n.current && ue(u, n.current, e, g);\n    }, [\n        e,\n        u,\n        g\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        function y(f) {\n            if (!l.current) return !1;\n            let [E] = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_10__.eventFiles)(f);\n            if (E) return !1;\n            let { pageY: T, target: R } = f;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(R)) return !1;\n            let S = Y(r, f.pageX, f.pageY, R, 100, 50), k = H(t), { blockElem: C, foundAtIndex: z, isFoundNodeEmptyParagraph: v } = V({\n                anchorElem: e,\n                editor: t,\n                fuzzy: !0,\n                horizontalOffset: -S,\n                point: new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(f.x, f.y),\n                startIndex: Ue(k.length),\n                useEdgeAsDefault: !0,\n                verbose: !0\n            });\n            ee = z;\n            let A = c.current;\n            if (C === null || A === null) return !1;\n            if (u !== C) {\n                var _s_admin, _s_admin1, _n_current_getBoundingClientRect, _n_current, _n_current_getBoundingClientRect1, _n_current1;\n                var _n_current_getBoundingClientRect_width, _n_current_getBoundingClientRect_width1;\n                let { isBelow: w, willStayInSamePosition: J } = ze((s === null || s === void 0 ? void 0 : (_s_admin = s.admin) === null || _s_admin === void 0 ? void 0 : _s_admin.hideGutter) ? \"0px\" : \"3rem\", g + ((s === null || s === void 0 ? void 0 : (_s_admin1 = s.admin) === null || _s_admin1 === void 0 ? void 0 : _s_admin1.hideGutter) ? (_n_current_getBoundingClientRect_width = n === null || n === void 0 ? void 0 : (_n_current = n.current) === null || _n_current === void 0 ? void 0 : (_n_current_getBoundingClientRect = _n_current.getBoundingClientRect()) === null || _n_current_getBoundingClientRect === void 0 ? void 0 : _n_current_getBoundingClientRect.width) !== null && _n_current_getBoundingClientRect_width !== void 0 ? _n_current_getBoundingClientRect_width : 0 : -((_n_current_getBoundingClientRect_width1 = n === null || n === void 0 ? void 0 : (_n_current1 = n.current) === null || _n_current1 === void 0 ? void 0 : (_n_current_getBoundingClientRect1 = _n_current1.getBoundingClientRect()) === null || _n_current_getBoundingClientRect1 === void 0 ? void 0 : _n_current_getBoundingClientRect1.width) !== null && _n_current_getBoundingClientRect_width1 !== void 0 ? _n_current_getBoundingClientRect_width1 : 0)), A, C, h, T, e, f, i, v);\n                f.preventDefault(), J || a({\n                    boundingBox: C.getBoundingClientRect(),\n                    elem: C,\n                    isBelow: w\n                });\n            } else (h === null || h === void 0 ? void 0 : h.elem) && (qe(A, h.elem), a({\n                boundingBox: C.getBoundingClientRect(),\n                elem: C,\n                isBelow: !1\n            }));\n            return !0;\n        }\n        function d(f) {\n            if (!l.current) return !1;\n            let [E] = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_10__.eventFiles)(f);\n            if (E) return !1;\n            let { dataTransfer: T, pageY: R, target: S } = f, k = (T === null || T === void 0 ? void 0 : T.getData(Ve)) || \"\";\n            return t.update(()=>{\n                let C = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(k);\n                if (!C || !(0,lexical__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(S)) return !1;\n                let z = Y(r, f.pageX, f.pageY, S, 100, 50), { blockElem: v, isFoundNodeEmptyParagraph: A } = V({\n                    anchorElem: e,\n                    editor: t,\n                    fuzzy: !0,\n                    horizontalOffset: -z,\n                    point: new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(f.x, f.y),\n                    useEdgeAsDefault: !0\n                });\n                if (!v) return !1;\n                let w = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNearestNodeFromDOMNode)(v);\n                if (!w) return !1;\n                if (w === C) return !0;\n                let { height: J, top: he } = G(v), oe = R >= he + J / 2 + window.scrollY;\n                A ? (w.insertBefore(C), w.remove()) : oe ? w.insertAfter(C) : w.insertBefore(C), u !== null && p(null), document.querySelectorAll(\".lexical-block-highlighter\").forEach((D)=>{\n                    D.remove();\n                });\n                let ye = t.getElementByKey(C.getKey());\n                setTimeout(()=>{\n                    let D = ye === null || ye === void 0 ? void 0 : ye.getBoundingClientRect();\n                    if (!D) return;\n                    let N = document.createElement(\"div\");\n                    N.className = \"lexical-block-highlighter\", N.style.backgroundColor = \"var(--theme-elevation-1000\", N.style.transition = \"opacity 0.5s ease-in-out\", N.style.zIndex = \"1\", N.style.pointerEvents = \"none\", N.style.boxSizing = \"border-box\", N.style.borderRadius = \"4px\", N.style.position = \"absolute\", document.body.appendChild(N), N.style.opacity = \"0.1\", N.style.height = \"\".concat(D.height + 8, \"px\"), N.style.width = \"\".concat(D.width + 8, \"px\"), N.style.top = \"\".concat(D.top + window.scrollY - 4, \"px\"), N.style.left = \"\".concat(D.left - 4, \"px\"), setTimeout(()=>{\n                        N.style.opacity = \"0\", setTimeout(()=>{\n                            N.remove();\n                        }, 500);\n                    }, 1e3);\n                }, 120);\n            }), !0;\n        }\n        return document.addEventListener(\"dragover\", y), document.addEventListener(\"drop\", d), ()=>{\n            document.removeEventListener(\"dragover\", y), document.removeEventListener(\"drop\", d);\n        };\n    }, [\n        r,\n        g,\n        e,\n        t,\n        h,\n        u,\n        s === null || s === void 0 ? void 0 : (_s_admin1 = s.admin) === null || _s_admin1 === void 0 ? void 0 : _s_admin1.hideGutter\n    ]);\n    function x(y) {\n        let d = y.dataTransfer;\n        if (!d || !u) return;\n        go(d, u);\n        let f = \"\";\n        t.update(()=>{\n            let E = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNearestNodeFromDOMNode)(u);\n            E && (f = E.getKey());\n        }), l.current = !0, d.setData(Ve, f);\n    }\n    function m() {\n        l.current = !1, (h === null || h === void 0 ? void 0 : h.elem) && qe(c.current, h === null || h === void 0 ? void 0 : h.elem);\n    }\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_7__.createPortal)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"icon draggable-block-menu\",\n                draggable: !0,\n                onDragEnd: m,\n                onDragStart: x,\n                ref: n,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: o ? \"icon\" : \"\"\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"draggable-block-target-line\",\n                ref: c\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"debug-highlight\",\n                ref: i\n            })\n        ]\n    }), e);\n}\nfunction Qe(t) {\n    let { anchorElem: e } = t, o = e === void 0 ? document.body : e, [r] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)();\n    return ho(r, o, r._editable);\n}\n_c18 = Qe;\n\n\n\n\n\nvar Xe = \"insert-paragraph-at-end\", Ze = ()=>{\n    var _o_admin;\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(4), [e] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), { editorConfig: o } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)();\n    if (o === null || o === void 0 ? void 0 : (_o_admin = o.admin) === null || _o_admin === void 0 ? void 0 : _o_admin.hideInsertParagraphAtEnd) return null;\n    let r;\n    t[0] !== e ? (r = ()=>{\n        e.update(Co);\n    }, t[0] = e, t[1] = r) : r = t[1];\n    let n = r, c;\n    return t[2] !== n ? (c = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"aria-label\": \"Insert Paragraph\",\n        className: Xe,\n        onClick: n,\n        role: \"button\",\n        tabIndex: 0,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: \"\".concat(Xe, \"-inside\"),\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: \"+\"\n            })\n        })\n    }), t[2] = n, t[3] = c) : c = t[3], c;\n};\nfunction Co() {\n    let t = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$createParagraphNode)();\n    (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getRoot)().append(t), t.select();\n}\n_c19 = Co;\n\n\n\nvar tt = ()=>{\n    _s();\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(4), { editorConfig: e } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), [o] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), r, n;\n    return t[0] !== o || t[1] !== e.features.markdownTransformers ? (r = ()=>{\n        var _e_features_markdownTransformers;\n        return (0,_chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.b)(o, (_e_features_markdownTransformers = e.features.markdownTransformers) !== null && _e_features_markdownTransformers !== void 0 ? _e_features_markdownTransformers : []);\n    }, n = [\n        o,\n        e.features.markdownTransformers\n    ], t[0] = o, t[1] = e.features.markdownTransformers, t[2] = r, t[3] = n) : (r = t[2], n = t[3]), react__WEBPACK_IMPORTED_MODULE_1__.useEffect(r, n), null;\n};\n_s(tt, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n\n\n\n\n\n\n\nfunction ot(t, e) {\n    let o = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(4), { maxLength: r, minLength: n } = e, c = r === void 0 ? 75 : r, i = n === void 0 ? 1 : n, l;\n    return o[0] !== c || o[1] !== i || o[2] !== t ? (l = (u)=>{\n        let { query: p } = u, h = \"[^\" + t + _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.g + \"\\\\s]\", s = new RegExp(\"(^|\\\\s|\\\\()([\" + t + \"]((?:\" + h + \"){0,\" + c + \"}))$\").exec(p);\n        if (s !== null) {\n            let g = s[1], x = s[3];\n            if (x.length >= i) return {\n                leadOffset: s.index + g.length,\n                matchingString: x,\n                replaceableString: s[2]\n            };\n        }\n        return null;\n    }, o[0] = c, o[1] = i, o[2] = t, o[3] = l) : l = o[3], l;\n}\nvar L = \"slash-menu-popup\";\nfunction vo(param) {\n    let { isSelected: t, item: e, onClick: o, onMouseEnter: r, ref: n } = param;\n    let { fieldProps: { featureClientSchemaMap: c, schemaPath: i } } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), { i18n: l } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_11__.d)(), u = \"\".concat(L, \"__item \").concat(L, \"__item-\").concat(e.key);\n    t && (u += \" \".concat(L, \"__item--selected\"));\n    let p = e.key;\n    return e.label && (p = typeof e.label == \"function\" ? e.label({\n        featureClientSchemaMap: c,\n        i18n: l,\n        schemaPath: i\n    }) : e.label), p.length > 25 && (p = p.substring(0, 25) + \"...\"), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n        \"aria-selected\": t,\n        className: u,\n        id: L + \"__item-\" + e.key,\n        onClick: o,\n        onMouseEnter: r,\n        ref: n,\n        role: \"option\",\n        tabIndex: -1,\n        type: \"button\",\n        children: [\n            (e === null || e === void 0 ? void 0 : e.Icon) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(e.Icon, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"\".concat(L, \"__item-text\"),\n                children: p\n            })\n        ]\n    }, e.key);\n}\nfunction st(param) {\n    let { anchorElem: t = document.body } = param;\n    let [e] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), { editorConfig: n } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), { i18n: c } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_11__.d)(), { fieldProps: { featureClientSchemaMap: i, schemaPath: l } } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), u = ot(\"/\", {\n        minLength: 0\n    }), p = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        let a = [];\n        for (let s of n.features.slashMenu.dynamicGroups)if (o) {\n            let g = s({\n                editor: e,\n                queryString: o\n            });\n            a = a.concat(g);\n        }\n        return a;\n    }, [\n        e,\n        o,\n        n === null || n === void 0 ? void 0 : n.features\n    ]), h = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        let a = [];\n        var _n_features_slashMenu_groups;\n        for (let s of (_n_features_slashMenu_groups = n === null || n === void 0 ? void 0 : n.features.slashMenu.groups) !== null && _n_features_slashMenu_groups !== void 0 ? _n_features_slashMenu_groups : [])a.push(s);\n        if (o) {\n            a = a.map((g)=>{\n                let x = g.items.filter((m)=>{\n                    let y = m.key;\n                    return m.label && (y = typeof m.label == \"function\" ? m.label({\n                        featureClientSchemaMap: i,\n                        i18n: c,\n                        schemaPath: l\n                    }) : m.label), new RegExp(o, \"gi\").exec(y) ? !0 : m.keywords != null ? m.keywords.some((d)=>new RegExp(o, \"gi\").exec(d)) : !1;\n                });\n                return x.length ? {\n                    ...g,\n                    items: x\n                } : null;\n            }), a = a.filter((g)=>g != null);\n            let s = p();\n            for (let g of s){\n                var _x_items;\n                let x = a.find((m)=>m.key === g.key);\n                x ? a = a.filter((m)=>m.key !== g.key) : x = {\n                    ...g,\n                    items: []\n                }, (x === null || x === void 0 ? void 0 : (_x_items = x.items) === null || _x_items === void 0 ? void 0 : _x_items.length) && (x.items = x.items.concat(x.items)), a.push(x);\n            }\n        }\n        return a;\n    }, [\n        o,\n        n === null || n === void 0 ? void 0 : n.features.slashMenu.groups,\n        p,\n        i,\n        c,\n        l\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.i, {\n        anchorElem: t,\n        groups: h,\n        menuRenderFn: (a, param)=>{\n            let { selectedItemKey: s, selectItemAndCleanUp: g, setSelectedItemKey: x } = param;\n            return a.current && h.length ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_7__.createPortal((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: L,\n                children: h.map((m)=>{\n                    let y = m.key;\n                    return m.label && i && (y = typeof m.label == \"function\" ? m.label({\n                        featureClientSchemaMap: i,\n                        i18n: c,\n                        schemaPath: l\n                    }) : m.label), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"\".concat(L, \"__group \").concat(L, \"__group-\").concat(m.key),\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: \"\".concat(L, \"__group-title\"),\n                                children: y\n                            }),\n                            m.items.map((d, f)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(vo, {\n                                    index: f,\n                                    isSelected: s === d.key,\n                                    item: d,\n                                    onClick: ()=>{\n                                        x(d.key), g(d);\n                                    },\n                                    onMouseEnter: ()=>{\n                                        x(d.key);\n                                    },\n                                    ref: (E)=>{\n                                        d.ref = {\n                                            current: E\n                                        };\n                                    }\n                                }, d.key))\n                        ]\n                    }, m.key);\n                })\n            }), a.current) : null;\n        },\n        onQueryChange: r,\n        triggerFn: u\n    });\n}\n\n\n\n\nfunction lt(t) {\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(6), { features: o } = t, [r] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), n;\n    e[0] !== r || e[1] !== o.enabledFormats ? (n = ()=>{\n        let i = Io(o.enabledFormats);\n        if (i.length !== 0) return r.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_6__.TextNode, (l)=>{\n            i.forEach((u)=>{\n                l.hasFormat(u) && l.toggleFormat(u);\n            });\n        });\n    }, e[0] = r, e[1] = o.enabledFormats, e[2] = n) : n = e[2];\n    let c;\n    return e[3] !== r || e[4] !== o ? (c = [\n        r,\n        o\n    ], e[3] = r, e[4] = o, e[5] = c) : c = e[5], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(n, c), null;\n}\nfunction Io(t) {\n    let e = Object.keys(lexical__WEBPACK_IMPORTED_MODULE_6__.TEXT_TYPE_TO_FORMAT), o = new Set(t);\n    return e.filter((r)=>!o.has(r));\n}\n_c20 = Io;\n\n\n\n\n\nfunction ct(t) {\n    var _r_admin;\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(7), { className: o, editorConfig: r } = t, { t: n } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_11__.d)(), c;\n    if (e[0] !== o || e[1] !== (r === null || r === void 0 ? void 0 : (_r_admin = r.admin) === null || _r_admin === void 0 ? void 0 : _r_admin.placeholder) || e[2] !== n) {\n        var _r_admin1, _r_admin2, _r_admin3, _r_admin4;\n        let i;\n        var _r_admin_placeholder;\n        e[4] !== (r === null || r === void 0 ? void 0 : (_r_admin1 = r.admin) === null || _r_admin1 === void 0 ? void 0 : _r_admin1.placeholder) || e[5] !== n ? (i = (_r_admin_placeholder = r === null || r === void 0 ? void 0 : (_r_admin2 = r.admin) === null || _r_admin2 === void 0 ? void 0 : _r_admin2.placeholder) !== null && _r_admin_placeholder !== void 0 ? _r_admin_placeholder : n(\"lexical:general:placeholder\"), e[4] = r === null || r === void 0 ? void 0 : (_r_admin3 = r.admin) === null || _r_admin3 === void 0 ? void 0 : _r_admin3.placeholder, e[5] = n, e[6] = i) : i = e[6], c = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalContentEditable_js__WEBPACK_IMPORTED_MODULE_12__.ContentEditable, {\n            \"aria-placeholder\": n(\"lexical:general:placeholder\"),\n            className: o !== null && o !== void 0 ? o : \"ContentEditable__root\",\n            placeholder: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: \"editor-placeholder\",\n                children: i\n            })\n        }), e[0] = o, e[1] = r === null || r === void 0 ? void 0 : (_r_admin4 = r.admin) === null || _r_admin4 === void 0 ? void 0 : _r_admin4.placeholder, e[2] = n, e[3] = c;\n    } else c = e[3];\n    return c;\n}\nvar dt = (t)=>{\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(19), { editorConfig: o, editorContainerRef: r, isSmallWidthViewport: n, onChange: c } = t, i = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), [l] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), [u, p] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), h;\n    e[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (h = (m)=>{\n        m !== null && p(m);\n    }, e[0] = h) : h = e[0];\n    let a = h, s, g;\n    e[1] !== l || e[2] !== i ? (s = ()=>{\n        var _i_parentEditor, _i_parentEditor1;\n        if (!(i === null || i === void 0 ? void 0 : i.uuid)) {\n            console.error(\"Lexical Editor must be used within an EditorConfigProvider\");\n            return;\n        }\n        (i === null || i === void 0 ? void 0 : (_i_parentEditor = i.parentEditor) === null || _i_parentEditor === void 0 ? void 0 : _i_parentEditor.uuid) && ((_i_parentEditor1 = i.parentEditor) === null || _i_parentEditor1 === void 0 ? void 0 : _i_parentEditor1.registerChild(i.uuid, i));\n        let m = ()=>{\n            i.focusEditor(i);\n        }, y = ()=>{\n            i.blurEditor(i);\n        }, d = l.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.FOCUS_COMMAND, ()=>(m(), !0), lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), f = l.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.BLUR_COMMAND, ()=>(y(), !0), lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW);\n        return ()=>{\n            var _i_parentEditor_unregisterChild, _i_parentEditor;\n            d(), f(), (_i_parentEditor = i.parentEditor) === null || _i_parentEditor === void 0 ? void 0 : (_i_parentEditor_unregisterChild = _i_parentEditor.unregisterChild) === null || _i_parentEditor_unregisterChild === void 0 ? void 0 : _i_parentEditor_unregisterChild.call(_i_parentEditor, i.uuid);\n        };\n    }, g = [\n        l,\n        i\n    ], e[1] = l, e[2] = i, e[3] = s, e[4] = g) : (s = e[3], g = e[4]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(s, g);\n    let x;\n    if (e[5] !== l || e[6] !== o || e[7] !== r || e[8] !== u || e[9] !== n || e[10] !== c) {\n        var _o_features_plugins, _o_features_plugins1, _o_features_plugins2, _o_features_markdownTransformers, _o_features, _o_features_plugins3, _o_features_plugins4, _o_features_plugins5;\n        let m;\n        e[12] !== c ? (m = (d, f, E)=>{\n            (!E.has(\"focus\") || E.size > 1) && (c === null || c === void 0 ? void 0 : c(d, f, E));\n        }, e[12] = c, e[13] = m) : m = e[13];\n        let y;\n        e[14] !== l || e[15] !== o.features.plugins || e[16] !== u || e[17] !== n ? (y = u && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n            children: [\n                !n && l.isEditable() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Qe, {\n                            anchorElem: u\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(He, {\n                            anchorElem: u\n                        })\n                    ]\n                }),\n                (_o_features_plugins = o.features.plugins) === null || _o_features_plugins === void 0 ? void 0 : _o_features_plugins.map((d)=>{\n                    if (d.position === \"floatingAnchorElem\" && !(d.desktopOnly === !0 && n)) return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n                        anchorElem: u,\n                        clientProps: d.clientProps,\n                        plugin: d\n                    }, d.key);\n                }),\n                l.isEditable() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(st, {\n                        anchorElem: u\n                    })\n                })\n            ]\n        }), e[14] = l, e[15] = o.features.plugins, e[16] = u, e[17] = n, e[18] = y) : y = e[18], x = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n            children: [\n                (_o_features_plugins1 = o.features.plugins) === null || _o_features_plugins1 === void 0 ? void 0 : _o_features_plugins1.map(qo),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: \"editor-container\",\n                    ref: r,\n                    children: [\n                        (_o_features_plugins2 = o.features.plugins) === null || _o_features_plugins2 === void 0 ? void 0 : _o_features_plugins2.map(Jo),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalRichTextPlugin_js__WEBPACK_IMPORTED_MODULE_13__.RichTextPlugin, {\n                            contentEditable: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: \"editor-scroller\",\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: \"editor\",\n                                    ref: a,\n                                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ct, {\n                                        editorConfig: o\n                                    })\n                                })\n                            }),\n                            ErrorBoundary: _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_14__.LexicalErrorBoundary\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ze, {}),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ae, {}),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(lt, {\n                            features: o.features\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalOnChangePlugin_js__WEBPACK_IMPORTED_MODULE_15__.OnChangePlugin, {\n                            ignoreSelectionChange: !0,\n                            onChange: m\n                        }),\n                        y,\n                        l.isEditable() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalHistoryPlugin_js__WEBPACK_IMPORTED_MODULE_16__.HistoryPlugin, {}),\n                                (o === null || o === void 0 ? void 0 : (_o_features = o.features) === null || _o_features === void 0 ? void 0 : (_o_features_markdownTransformers = _o_features.markdownTransformers) === null || _o_features_markdownTransformers === void 0 ? void 0 : _o_features_markdownTransformers.length) > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tt, {})\n                            ]\n                        }),\n                        (_o_features_plugins3 = o.features.plugins) === null || _o_features_plugins3 === void 0 ? void 0 : _o_features_plugins3.map(Qo),\n                        (_o_features_plugins4 = o.features.plugins) === null || _o_features_plugins4 === void 0 ? void 0 : _o_features_plugins4.map(Xo)\n                    ]\n                }),\n                (_o_features_plugins5 = o.features.plugins) === null || _o_features_plugins5 === void 0 ? void 0 : _o_features_plugins5.map(Zo)\n            ]\n        }), e[5] = l, e[6] = o, e[7] = r, e[8] = u, e[9] = n, e[10] = c, e[11] = x;\n    } else x = e[11];\n    return x;\n};\nfunction qo(t) {\n    if (t.position === \"aboveContainer\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\nfunction Jo(t) {\n    if (t.position === \"top\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\n_c21 = Jo;\nfunction Qo(t) {\n    if (t.position === \"normal\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\n_c22 = Qo;\nfunction Xo(t) {\n    if (t.position === \"bottom\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\n_c23 = Xo;\nfunction Zo(t) {\n    if (t.position === \"belowContainer\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\n_c24 = Zo;\nvar ft = (param)=>{\n    let { children: t, providers: e } = param;\n    if (!(e === null || e === void 0 ? void 0 : e.length)) return t;\n    let o = e[0];\n    return e.length > 1 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ft, {\n            providers: e.slice(1),\n            children: t\n        })\n    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o, {\n        children: t\n    });\n}, pt = (t)=>{\n    _s1();\n    let { composerKey: e, editorConfig: o, fieldProps: r, isSmallWidthViewport: n, onChange: c, readOnly: i, value: l } = t, u = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), p = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.useEditDepth)(), h = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null), a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (l && typeof l != \"object\") throw new Error(\"The value passed to the Lexical editor is not an object. This is not supported. Please remove the data from the field and start again. This is the value that was passed in: \" + JSON.stringify(l));\n        if (l && Array.isArray(l) && !(\"root\" in l)) throw new Error(\"You have tried to pass in data from the old Slate editor to the new Lexical editor. The data structure is different, thus you will have to migrate your data. We offer a one-line migration script which migrates all your rich text fields: https://payloadcms.com/docs/lexical/migration#migration-via-migration-script-recommended\");\n        if (l && \"jsonContent\" in l) throw new Error(\"You have tried to pass in data from payload-plugin-lexical. The data structure is different, thus you will have to migrate your data. Migration guide: https://payloadcms.com/docs/lexical/migration#migrating-from-payload-plugin-lexical\");\n        return {\n            editable: i !== !0,\n            editorState: l != null ? JSON.stringify(l) : void 0,\n            namespace: o.lexical.namespace,\n            nodes: (0,_chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.k)({\n                editorConfig: o\n            }),\n            onError: (s)=>{\n                throw s;\n            },\n            theme: o.lexical.theme\n        };\n    }, [\n        o\n    ]);\n    return a ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalComposer_js__WEBPACK_IMPORTED_MODULE_18__.LexicalComposer, {\n        initialConfig: a,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.a, {\n            editorConfig: o,\n            editorContainerRef: h,\n            fieldProps: r,\n            parentContext: (u === null || u === void 0 ? void 0 : u.editDepth) === p ? u : void 0,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ft, {\n                providers: o.features.providers,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(dt, {\n                    editorConfig: o,\n                    editorContainerRef: h,\n                    isSmallWidthViewport: n,\n                    onChange: c\n                })\n            })\n        })\n    }, e + a.editable) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n        children: \"Loading...\"\n    });\n};\n_s1(pt, \"qQVe1FgvPY+zDD3YcqY7eBEDouo=\");\nvar pe = \"rich-text-lexical\", fn = (t)=>{\n    var _e_admin;\n    _s2();\n    let { editorConfig: e, field: o, field: { name: r, admin: { className: n, description: c, readOnly: i } = {}, label: l, localized: u, required: p }, path: h, readOnly: a, validate: s } = t, g = a || i, x = h !== null && h !== void 0 ? h : r, m = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.useEditDepth)(), y = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((M, F)=>typeof s == \"function\" ? s(M, {\n            ...F,\n            required: p\n        }) : !0, [\n        s,\n        p\n    ]), { customComponents: { AfterInput: d, BeforeInput: f, Description: E, Error: T, Label: R } = {}, disabled: S, initialValue: k, setValue: C, showError: z, value: v } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.useField)({\n        path: x,\n        validate: y\n    }), A = g || S, [w, J] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), [he, Pe] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), oe = react__WEBPACK_IMPORTED_MODULE_1__.useRef(k), Q = react__WEBPACK_IMPORTED_MODULE_1__.useRef(v);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let M = ()=>{\n            let F = window.matchMedia(\"(max-width: 768px)\").matches;\n            F !== w && J(F);\n        };\n        return M(), window.addEventListener(\"resize\", M), ()=>{\n            window.removeEventListener(\"resize\", M);\n        };\n    }, [\n        w\n    ]);\n    let ye = [\n        pe,\n        \"field-type\",\n        n,\n        z && \"error\",\n        A && \"\".concat(pe, \"--read-only\"),\n        (e === null || e === void 0 ? void 0 : (_e_admin = e.admin) === null || _e_admin === void 0 ? void 0 : _e_admin.hideGutter) !== !0 && !w ? \"\".concat(pe, \"--show-gutter\") : null\n    ].filter(Boolean).join(\" \"), D = \"\".concat(x, \".\").concat(m), N = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((M)=>{\n        let F = M.toJSON();\n        Q.current = F, C(F);\n    }, [\n        C\n    ]), bt = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>(0,_payloadcms_ui_shared__WEBPACK_IMPORTED_MODULE_19__.mergeFieldStyles)(o), [\n        o\n    ]), Ct = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.useEffectEvent)((M)=>{\n        Q.current !== v && JSON.stringify(Q.current) !== JSON.stringify(v) && (oe.current = M, Q.current = v, Pe(new Date));\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        Object.is(k, oe.current) || Ct(k);\n    }, [\n        k\n    ]), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: ye,\n        style: bt,\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.RenderCustomComponent, {\n                CustomComponent: T,\n                Fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.FieldError, {\n                    path: x,\n                    showError: z\n                })\n            }),\n            R || (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.FieldLabel, {\n                label: l,\n                localized: u,\n                path: x,\n                required: p\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"\".concat(pe, \"__wrap\"),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_error_boundary__WEBPACK_IMPORTED_MODULE_20__.ErrorBoundary, {\n                        fallbackRender: pn,\n                        onReset: ()=>{},\n                        children: [\n                            f,\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(pt, {\n                                composerKey: D,\n                                editorConfig: e,\n                                fieldProps: t,\n                                isSmallWidthViewport: w,\n                                onChange: N,\n                                readOnly: A,\n                                value: v\n                            }, JSON.stringify({\n                                path: x,\n                                rerenderProviderKey: he\n                            })),\n                            d\n                        ]\n                    }),\n                    E,\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.RenderCustomComponent, {\n                        CustomComponent: E,\n                        Fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.FieldDescription, {\n                            description: c,\n                            path: x\n                        })\n                    })\n                ]\n            })\n        ]\n    }, D);\n};\n_s2(fn, \"DPMSQkCVdeOZZE8RP5QTJMsn/zc=\");\nfunction pn(param) {\n    let { error: t } = param;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: \"errorBoundary\",\n        role: \"alert\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                children: \"Something went wrong:\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n                style: {\n                    color: \"red\"\n                },\n                children: t.message\n            })\n        ]\n    });\n}\nvar Fi = fn;\n //# sourceMappingURL=Field-MAUKSOAP.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24;\n$RefreshReg$(_c, \"Ae\");\n$RefreshReg$(_c1, \"Ot\");\n$RefreshReg$(_c2, \"Ft\");\n$RefreshReg$(_c3, \"Kt\");\n$RefreshReg$(_c4, \"Ht\");\n$RefreshReg$(_c5, \"Wt\");\n$RefreshReg$(_c6, \"Yt\");\n$RefreshReg$(_c7, \"Gt\");\n$RefreshReg$(_c8, \"Z\");\n$RefreshReg$(_c9, \"Ie\");\n$RefreshReg$(_c10, \"Y\");\n$RefreshReg$(_c11, \"G\");\n$RefreshReg$(_c12, \"H\");\n$RefreshReg$(_c13, \"Jt\");\n$RefreshReg$(_c14, \"V\");\n$RefreshReg$(_c15, \"Fe\");\n$RefreshReg$(_c16, \"He\");\n$RefreshReg$(_c17, \"Ue\");\n$RefreshReg$(_c18, \"Qe\");\n$RefreshReg$(_c19, \"Co\");\n$RefreshReg$(_c20, \"Io\");\n$RefreshReg$(_c21, \"Jo\");\n$RefreshReg$(_c22, \"Qo\");\n$RefreshReg$(_c23, \"Xo\");\n$RefreshReg$(_c24, \"Zo\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-MAUKSOAP.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"21d6f182f09f\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcGF5bG9hZGNtcytyaWNodGV4dC1sZXhpY2FsQDMuMjkuMF9AZmFjZWxlc3MtdWkrbW9kYWxAMy4wLjAtYmV0YS4yX3JlYWN0LWRvbUAxOS4wLjBfcmVhY3RAMTlfNWttbGxuam1jNmxqbmNlYXF6cTdpM3RqcGUvbm9kZV9tb2R1bGVzL0BwYXlsb2FkY21zL3JpY2h0ZXh0LWxleGljYWwvZGlzdC9leHBvcnRzL2NsaWVudC9idW5kbGVkLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaGFzaGlcXERlc2t0b3BcXGZ1c2lvbmlxeC1wcm9qZWN0c1xcZnVzaW9uaXF4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAcGF5bG9hZGNtcytyaWNodGV4dC1sZXhpY2FsQDMuMjkuMF9AZmFjZWxlc3MtdWkrbW9kYWxAMy4wLjAtYmV0YS4yX3JlYWN0LWRvbUAxOS4wLjBfcmVhY3RAMTlfNWttbGxuam1jNmxqbmNlYXF6cTdpM3RqcGVcXG5vZGVfbW9kdWxlc1xcQHBheWxvYWRjbXNcXHJpY2h0ZXh0LWxleGljYWxcXGRpc3RcXGV4cG9ydHNcXGNsaWVudFxcYnVuZGxlZC5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyMWQ2ZjE4MmYwOWZcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@payloadcms+richtext-lexical@3.29.0_@faceless-ui+modal@3.0.0-beta.2_react-dom@19.0.0_react@19_5kmllnjmc6ljnceaqzq7i3tjpe/node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/react-error-boundary@4.1.2_react@19.0.0/node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-error-boundary@4.1.2_react@19.0.0/node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorBoundary: () => (/* binding */ ErrorBoundary),\n/* harmony export */   ErrorBoundaryContext: () => (/* binding */ ErrorBoundaryContext),\n/* harmony export */   useErrorBoundary: () => (/* binding */ useErrorBoundary),\n/* harmony export */   withErrorBoundary: () => (/* binding */ withErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ ErrorBoundary,ErrorBoundaryContext,useErrorBoundary,withErrorBoundary auto */ var _s = $RefreshSig$();\n\nconst ErrorBoundaryContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst initialState = {\n    didCatch: false,\n    error: null\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    static getDerivedStateFromError(error) {\n        return {\n            didCatch: true,\n            error\n        };\n    }\n    resetErrorBoundary() {\n        const { error } = this.state;\n        if (error !== null) {\n            var _this$props$onReset, _this$props;\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {\n                args,\n                reason: \"imperative-api\"\n            });\n            this.setState(initialState);\n        }\n    }\n    componentDidCatch(error, info) {\n        var _this$props$onError, _this$props2;\n        (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { didCatch } = this.state;\n        const { resetKeys } = this.props;\n        // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n        // we'd end up resetting the error boundary immediately.\n        // This would likely trigger a second error to be thrown.\n        // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n        if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {\n            var _this$props$onReset2, _this$props3;\n            (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {\n                next: resetKeys,\n                prev: prevProps.resetKeys,\n                reason: \"keys\"\n            });\n            this.setState(initialState);\n        }\n    }\n    render() {\n        const { children, fallbackRender, FallbackComponent, fallback } = this.props;\n        const { didCatch, error } = this.state;\n        let childToRender = children;\n        if (didCatch) {\n            const props = {\n                error,\n                resetErrorBoundary: this.resetErrorBoundary\n            };\n            if (typeof fallbackRender === \"function\") {\n                childToRender = fallbackRender(props);\n            } else if (FallbackComponent) {\n                childToRender = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(FallbackComponent, props);\n            } else if (fallback !== undefined) {\n                childToRender = fallback;\n            } else {\n                {\n                    console.error(\"react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop\");\n                }\n                throw error;\n            }\n        }\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundaryContext.Provider, {\n            value: {\n                didCatch,\n                error,\n                resetErrorBoundary: this.resetErrorBoundary\n            }\n        }, childToRender);\n    }\n    constructor(props){\n        super(props);\n        this.resetErrorBoundary = this.resetErrorBoundary.bind(this);\n        this.state = initialState;\n    }\n}\nfunction hasArrayChanged() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return a.length !== b.length || a.some((item, index)=>!Object.is(item, b[index]));\n}\nfunction assertErrorBoundaryContext(value) {\n    if (value == null || typeof value.didCatch !== \"boolean\" || typeof value.resetErrorBoundary !== \"function\") {\n        throw new Error(\"ErrorBoundaryContext not found\");\n    }\n}\nfunction useErrorBoundary() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ErrorBoundaryContext);\n    assertErrorBoundaryContext(context);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        error: null,\n        hasError: false\n    });\n    const memoized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useErrorBoundary.useMemo[memoized]\": ()=>({\n                resetBoundary: ({\n                    \"useErrorBoundary.useMemo[memoized]\": ()=>{\n                        context.resetErrorBoundary();\n                        setState({\n                            error: null,\n                            hasError: false\n                        });\n                    }\n                })[\"useErrorBoundary.useMemo[memoized]\"],\n                showBoundary: ({\n                    \"useErrorBoundary.useMemo[memoized]\": (error)=>setState({\n                            error,\n                            hasError: true\n                        })\n                })[\"useErrorBoundary.useMemo[memoized]\"]\n            })\n    }[\"useErrorBoundary.useMemo[memoized]\"], [\n        context.resetErrorBoundary\n    ]);\n    if (state.hasError) {\n        throw state.error;\n    }\n    return memoized;\n}\n_s(useErrorBoundary, \"+pKi6m5l0SpCZXu8kma/1W0pdXE=\");\nfunction withErrorBoundary(component, errorBoundaryProps) {\n    const Wrapped = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundary, errorBoundaryProps, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(component, {\n            ...props,\n            ref\n        })));\n    // Format for display in DevTools\n    const name = component.displayName || component.name || \"Unknown\";\n    Wrapped.displayName = \"withErrorBoundary(\".concat(name, \")\");\n    return Wrapped;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/react-error-boundary@4.1.2_react@19.0.0/node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\n"));

/***/ })

}]);